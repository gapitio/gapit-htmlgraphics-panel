"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[57],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>b});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),s=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},u=function(e){var a=s(e.components);return n.createElement(p.Provider,{value:a},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,b=c["".concat(p,".").concat(m)]||c[m]||d[m]||l;return t?n.createElement(b,i(i({ref:a},u),{},{components:t})):n.createElement(b,i({ref:a},u))}));function b(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},324:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=t(7462),r=(t(7294),t(3905));const l={id:"update-grafana-variable-example",title:"Update grafana variable example"},i=void 0,o={unversionedId:"examples/update-grafana-variable-example",id:"examples/update-grafana-variable-example",title:"Update grafana variable example",description:"Update grafana variable example",source:"@site/docs/examples/update-grafana-variable-example.md",sourceDirName:"examples",slug:"/examples/update-grafana-variable-example",permalink:"/docs/examples/update-grafana-variable-example",draft:!1,editUrl:"https://github.com/gapitio/gapit-htmlgraphics-panel/edit/main/website/docs/examples/update-grafana-variable-example.md",tags:[],version:"current",frontMatter:{id:"update-grafana-variable-example",title:"Update grafana variable example"},sidebar:"docsSidebar",previous:{title:"Font example",permalink:"/docs/examples/font-example"},next:{title:"Dynamic variables",permalink:"/docs/advanced/dynamic-variables"}},p={},s=[],u={toc:s};function c(e){let{components:a,...l}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,l,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Update grafana variable example",src:t(4460).Z,width:"885",height:"347"})),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"For Grafana v8.3.0+ variables used by HTMLGraphics won't update when the variable is changed unless it's wrapped in ",(0,r.kt)("inlineCode",{parentName:"p"},"${}"),".")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"testVariable used",src:t(5837).Z,width:"697",height:"583"})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"HTML/SVG")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<button></button>\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"onInit")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// For Grafana v8.3.0+ the variable needs to be wrapped in ${}\nconst { testVariable } = customProperties;\nconst testVariableName = testVariable.replace(/[${}]/g, '');\nconst buttonElt = htmlNode.querySelector('button');\n\n/*\n  Update a grafana variable\n\n  More information in the grafana docs\n  https://grafana.com/docs/grafana/v9.1/developers/plugins/add-support-for-variables/\n*/\nfunction updateGrafanaVariable(variableName, value) {\n  htmlGraphics.locationService.partial(\n    {\n      [`var-${variableName}`]: value,\n    },\n    true // replace: true tells Grafana to update the current URL state, rather than creating a new history entry.\n  );\n\n  // Old method using getLocationSrv\n  /* getLocationSrv().update({\n    query: {\n      [`var-${variableName}`]: value,\n    },\n    partial: true, // partial: true makes the update only affect the query parameters listed in query, and leaves the other query parameters unchanged.\n    replace: true, // replace: true tells Grafana to update the current URL state, rather than creating a new history entry.\n  }); */\n}\n\nfunction getGrafanaVariableValue(variable) {\n  return getTemplateSrv().replace(variable);\n}\n\nfunction updateButtonText() {\n  buttonElt.textContent = `${testVariableName}'s current value is: ${getGrafanaVariableValue(testVariable)}`;\n}\n\nbuttonElt.onclick = function () {\n  updateGrafanaVariable(testVariableName, getGrafanaVariableValue(testVariable) == 'b' ? 'a' : 'b');\n};\n\n/*\n  When the variable changes panelupdate will trigger.\n  The panelupdate is used to update the button text so the text is the same as the variable.\n*/\nhtmlNode.addEventListener('panelupdate', () => {\n  updateButtonText();\n});\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Custom properties")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "testVariable": "${testVariable}"\n}\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Panel options")," (import/export)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "calcsMutation": "standard",\n  "reduceOptions": {\n    "calcs": [\n      "lastNotNull",\n      "last",\n      "first",\n      "firstNotNull",\n      "min",\n      "max",\n      "mean",\n      "sum",\n      "count",\n      "range",\n      "delta",\n      "step",\n      "diff",\n      "logmin",\n      "allIsZero",\n      "allIsNull",\n      "diffperc"\n    ]\n  },\n  "add100Percentage": true,\n  "centerAlignContent": true,\n  "overflow": "visible",\n  "SVGBaseFix": true,\n  "codeData": "{\\n  \\"testVariable\\": \\"${testVariable}\\"\\n}",\n  "rootCSS": "",\n  "css": "",\n  "html": "<button></button>\\n",\n  "renderOnMount": true,\n  "onRender": "",\n  "dynamicData": false,\n  "dynamicHtmlGraphics": false,\n  "dynamicFieldDisplayValues": false,\n  "dynamicProps": false,\n  "panelupdateOnMount": true,\n  "onInitOnResize": false,\n  "onInit": "// For Grafana v8.3.0+ the variable needs to be wrapped in ${}\\nconst { testVariable } = customProperties;\\nconst testVariableName = testVariable.replace(/[${}]/g, \\"\\");\\nconst buttonElt = htmlNode.querySelector(\'button\');\\n\\n/*\\n  Update a grafana variable\\n\\n  More information in the grafana docs\\n  https://grafana.com/docs/grafana/v9.1/developers/plugins/add-support-for-variables/\\n*/\\nfunction updateGrafanaVariable(variableName, value) {\\n  getLocationSrv().update({\\n    query: {\\n      [`var-${variableName}`]: value,\\n    },\\n    partial: true, // partial: true makes the update only affect the query parameters listed in query, and leaves the other query parameters unchanged.\\n    replace: true, // replace: true tells Grafana to update the current URL state, rather than creating a new history entry.\\n  });\\n}\\n\\nfunction getGrafanaVariableValue(variable) {\\n  return getTemplateSrv().replace(variable);\\n}\\n\\nfunction updateButtonText() {\\n  buttonElt.textContent = `${testVariableName}\'s current value is: ${getGrafanaVariableValue(testVariable)}`;\\n}\\n\\nbuttonElt.onclick = function () {\\n  updateGrafanaVariable(testVariableName, getGrafanaVariableValue(testVariable) == \'b\' ? \'a\' : \'b\');\\n};\\n\\n/*\\n  When the variable changes panelupdate will trigger.\\n  The panelupdate is used to update the button text so the text is the same as the variable.\\n*/\\nhtmlNode.addEventListener(\'panelupdate\', () => {\\n  updateButtonText();\\n});\\n"\n}\n')))}c.isMDXComponent=!0},4460:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/update-grafana-variable-example-79cf4dd6597ef1741652be0cba6418fa.gif"},5837:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/test-variable-used-e1dc001efd789e40b5506c155e9613c5.png"}}]);