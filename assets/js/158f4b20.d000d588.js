"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[688],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return u}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function h(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),d=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return i.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=h(e,["components","mdxType","originalType","parentName"]),c=d(n),u=a,m=c["".concat(o,".").concat(u)]||c[u]||p[u]||r;return n?i.createElement(m,l(l({ref:t},s),{},{components:n})):i.createElement(m,l({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var h={};for(var o in t)hasOwnProperty.call(t,o)&&(h[o]=t[o]);h.originalType=e,h.mdxType="string"==typeof e?e:a,l[1]=h;for(var d=2;d<r;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2534:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return h},contentTitle:function(){return o},metadata:function(){return d},toc:function(){return s},default:function(){return c}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),l=["components"],h={id:"dynamic-height-and-width",title:"Dynamic height and width"},o=void 0,d={unversionedId:"examples/dynamic-height-and-width",id:"examples/dynamic-height-and-width",isDocsHomePage:!1,title:"Dynamic height and width",description:"Dynamic height and width",source:"@site/docs/examples/dynamic-height-and-width.md",sourceDirName:"examples",slug:"/examples/dynamic-height-and-width",permalink:"/docs/examples/dynamic-height-and-width",editUrl:"https://github.com/gapitio/gapit-htmlgraphics-panel/edit/main/website/docs/examples/dynamic-height-and-width.md",tags:[],version:"current",frontMatter:{id:"dynamic-height-and-width",title:"Dynamic height and width"},sidebar:"docsSidebar",previous:{title:"Communicate between panels",permalink:"/docs/examples/communicate-between-panels"},next:{title:"Font example",permalink:"/docs/examples/font-example"}},s=[],p={toc:s};function c(e){var t=e.components,h=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},p,h,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Dynamic height and width",src:n(1099).Z})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CSS")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"* {\n  font-family: Open Sans;\n}\n\ndiv {\n  text-align: center;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"HTML/SVG")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div>\n  <p><span>Height: </span><span class="value-field" /></p>\n  <p><span>Width: </span><span class="value-field" /></p>\n</div>\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"onInit")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// REMEMBER TO TURN DYNAMIC HTMLGRAPHICS TO TRUE\n\nconst [heightValueElt, widthValueElt] = htmlNode.querySelectorAll('.value-field');\n\n// Used to store the initial\nconst storedPanelSize = {\n  height: htmlGraphics.height,\n  width: htmlGraphics.width,\n};\n\nconst updateValueText = () => {\n  // Important that htmlGraphics.height or width is used inside the function.\n  // If height or width is destructured outside the function they will not get the new height.\n  heightValueElt.textContent = htmlGraphics.height;\n  widthValueElt.textContent = htmlGraphics.width;\n};\n\nconst updateStoredPanelSize = () => {\n  storedPanelSize.height = htmlGraphics.height;\n  storedPanelSize.width = htmlGraphics.width;\n};\n\n// Show the height and width right away.\nupdateValueText();\n\nhtmlNode.onpanelupdate = () => {\n  const isPanelSizeUpdate = !(\n    htmlGraphics.height == storedPanelSize.height && htmlGraphics.width === storedPanelSize.width\n  );\n\n  if (isPanelSizeUpdate) {\n    updateValueText();\n\n    // Update the previous stored values with the new height and witdth\n    updateStoredPanelSize();\n  }\n};\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Panel options")," (import/export)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "calcsMutation": "standard",\n  "reduceOptions": {\n    "calcs": [\n      "lastNotNull",\n      "last",\n      "first",\n      "firstNotNull",\n      "min",\n      "max",\n      "mean",\n      "sum",\n      "count",\n      "range",\n      "delta",\n      "step",\n      "diff",\n      "logmin",\n      "allIsZero",\n      "allIsNull",\n      "diffperc"\n    ]\n  },\n  "add100Percentage": true,\n  "centerAlignContent": true,\n  "overflow": "visible",\n  "SVGBaseFix": true,\n  "codeData": "{\\n  \\"text\\": \\"Random text\\"\\n}",\n  "rootCSS": "",\n  "css": "* {\\n  font-family: Open Sans;\\n}\\n\\ndiv {\\n  text-align: center;\\n}",\n  "html": "<div>\\n  <p><span>Height: </span><span class=\\"value-field\\" /></p>\\n  <p><span>Width: </span><span class=\\"value-field\\" /></p>\\n</div>\\n",\n  "renderOnMount": true,\n  "onRender": "",\n  "dynamicData": false,\n  "dynamicHtmlGraphics": true,\n  "dynamicFieldDisplayValues": false,\n  "dynamicProps": false,\n  "panelupdateOnMount": true,\n  "onInit": "// REMEMBER TO TURN DYNAMIC HTMLGRAPHICS TO TRUE\\n\\nconst [heightValueElt, widthValueElt] = htmlNode.querySelectorAll(\\".value-field\\");\\n\\n// Used to store the initial \\nconst storedPanelSize = {\\n  height: htmlGraphics.height,\\n  width: htmlGraphics.width\\n}\\n\\nconst updateValueText = () => {\\n  // Important that htmlGraphics.height or width is used inside the function.\\n  // If height or width is destructured outside the function they will not get the new height.\\n  heightValueElt.textContent = htmlGraphics.height;\\n  widthValueElt.textContent = htmlGraphics.width;\\n}\\n\\nconst updateStoredPanelSize = () => {\\n  storedPanelSize.height = htmlGraphics.height;\\n  storedPanelSize.width = htmlGraphics.width;\\n}\\n\\n// Show the height and width right away.\\nupdateValueText();\\n\\nhtmlNode.onpanelupdate = () => {\\n  const isPanelSizeUpdate = !(htmlGraphics.height == storedPanelSize.height && htmlGraphics.width === storedPanelSize.width);\\n\\n  if (isPanelSizeUpdate) {\\n    updateValueText();\\n\\n    // Update the previous stored values with the new height and witdth\\n    updateStoredPanelSize();\\n  }\\n}\\n"\n}\n')))}c.isMDXComponent=!0},1099:function(e,t,n){t.Z=n.p+"assets/images/example-dynamic-height-and-width-1a0e59b6cfdbaf75668c623c52ef83cd.gif"}}]);