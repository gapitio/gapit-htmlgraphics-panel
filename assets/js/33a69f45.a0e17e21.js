"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[736],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(a),u=l,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||r;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:l,o[1]=i;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5189:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var n=a(7462),l=(a(7294),a(3905));const r={id:"references",title:"References"},o=void 0,i={unversionedId:"references",id:"references",title:"References",description:"All references are in htmlGraphics, but not every reference is global.",source:"@site/docs/references.md",sourceDirName:".",slug:"/references",permalink:"/docs/references",draft:!1,editUrl:"https://github.com/gapitio/gapit-htmlgraphics-panel/edit/main/website/docs/references.md",tags:[],version:"current",frontMatter:{id:"references",title:"References"},sidebar:"docsSidebar",previous:{title:"Options",permalink:"/docs/options"},next:{title:"Grafana boot data",permalink:"/docs/guides/grafana-boot-data"}},s={},p=[{value:"htmlGraphics (global)",id:"htmlgraphics-global",level:2},{value:"htmlNode",id:"htmlnode",level:3},{value:"data",id:"data",level:3},{value:"customProperties",id:"customproperties",level:3},{value:"codeData",id:"codedata",level:3},{value:"options",id:"options",level:3},{value:"theme",id:"theme",level:3},{value:"theme2",id:"theme2",level:3},{value:"getTemplateSrv",id:"gettemplatesrv",level:3},{value:"<del>getLocationSrv</del>",id:"getlocationsrv",level:3},{value:"locationService",id:"locationservice",level:3},{value:"props",id:"props",level:3},{value:"width",id:"width",level:3},{value:"height",id:"height",level:3},{value:"getFieldDisplayValues",id:"getfielddisplayvalues",level:3},{value:"fieldDisplayValues",id:"fielddisplayvalues",level:3},{value:"fieldReducers",id:"fieldreducers",level:3},{value:"htmlNode (global)",id:"htmlnode-global",level:2},{value:"panelupdate event",id:"panelupdate-event",level:3},{value:"panelwillunmount event",id:"panelwillunmount-event",level:3},{value:"customProperties (global)",id:"customproperties-global",level:2},{value:"codeData (global)",id:"codedata-global",level:2},{value:"data (global)",id:"data-global",level:2},{value:"options (global)",id:"options-global",level:2},{value:"theme (global)",id:"theme-global",level:2},{value:"getTemplateSrv (global)",id:"gettemplatesrv-global",level:2},{value:"<del>getLocationSrv (global)</del>",id:"getlocationsrv-global",level:2}],c={toc:p};function d(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"All references are in htmlGraphics, but not every reference is global.")),(0,l.kt)("p",null,"The plugin makes several references to the HTML/SVG document and Grafana in the execution context of onRender and onInit functions/javascript. Below are details for each. Remember, you can always use the ",(0,l.kt)("a",{parentName:"p",href:"https://developers.google.com/web/tools/chrome-devtools/console"},"developer console")," (ctrl+shift+j) and ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Console/log"},"console.log()"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"// Log this in onRender or onInit, and look at developer console (ctrl+shift+j).\nconsole.log('htmlGraphics', htmlGraphics);\n")),(0,l.kt)("h2",{id:"htmlgraphics-global"},"htmlGraphics (global)"),(0,l.kt)("p",null,"An object (dict) containing all the variables."),(0,l.kt)("h3",{id:"htmlnode"},"htmlNode"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot"},"ShadowRoot")," which contains the elements added in the HTML/SVG document (works similarly to document)."),(0,l.kt)("p",null,"Used to get elements and their properties."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const randomTextElt = htmlGraphics.htmlNode.querySelector('#random-text-elt');\nrandomTextElt.textContent = 'Something';\nrandomTextElt.style.fill = '#08f';\n")),(0,l.kt)("h3",{id:"data"},"data"),(0,l.kt)("p",null,"The PanelData interface passed into the panel by Grafana."),(0,l.kt)("p",null,"Can be used to retrieve metric values."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"// Used in onRender as it updates every time new data is available\nconst getMetricByName = (metricName, noDataValue = 'No data') => {\n  const filteredSeries = htmlGraphics.data.series.filter((series) => series.name == metricName);\n  if (filteredSeries.length > 0) {\n    return filteredSeries[0].fields[1].state.calcs.last;\n  }\n  return noDataValue;\n};\n\ngetMetricByName('random-metric-name');\n")),(0,l.kt)("h3",{id:"customproperties"},"customProperties"),(0,l.kt)("p",null,"The parsed json object ",(0,l.kt)("em",{parentName:"p"},"(also available as a JSON string in options.codeData)")," from the Custom properties option ",(0,l.kt)("em",{parentName:"p"},"(named codeData in the options for backwards compatibility)"),"."),(0,l.kt)("p",null,"Used to get the json object values."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Custom properties")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "something": true\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"// onRender or onInit\n\nconsole.log(htmlGraphics.customProperties.something); // true\n")),(0,l.kt)("h3",{id:"codedata"},"codeData"),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"codeData is deprecated. Use customProperties instead.")),(0,l.kt)("p",null,"Same as ",(0,l.kt)("a",{parentName:"p",href:"#customproperties-global"},"customProperties")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Custom properties")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "something": true\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"// onRender or onInit\n\nconsole.log(htmlGraphics.codeData.something); // true\n")),(0,l.kt)("h3",{id:"options"},"options"),(0,l.kt)("p",null,"The options object."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(htmlGraphics.options);\n\n// Looks something like this, when logged in the console.\n\n{\n  SVGBaseFix: true,\n  add100Percentage: true,\n  centerAlignContent: true,\n  codeData: "{\\"randomKey\\": \\"randomValue\\"}",\n  css: undefined,\n  html: undefined,\n  onInit: "console.log(options)",\n  onRender: undefined,\n  ...\n}\n')),(0,l.kt)("h3",{id:"theme"},"theme"),(0,l.kt)("p",null,"The GrafanaTheme object. It stores the current theme (light/dark), colors used by grafana, ETC."),(0,l.kt)("p",null,"Very useful when you're making a dark mode and light mode."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const darkTheme = () => {\n  ...\n};\n\nif (htmlGraphics.theme.isDark) {\n  darkTheme();\n}\n")),(0,l.kt)("h3",{id:"theme2"},"theme2"),(0,l.kt)("p",null,"The new GrafanaTheme2 object introduced in Grafana v8. It stores the current theme (light/dark), colors used by grafana, ETC."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.theme2);\n")),(0,l.kt)("h3",{id:"gettemplatesrv"},"getTemplateSrv"),(0,l.kt)("p",null,"Used to retrieve the TemplateSrv that can be used to fetch available template variables."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"htmlGraphics.getTemplateSrv().replace(`$randomVariable`);\n")),(0,l.kt)("h3",{id:"getlocationsrv"},(0,l.kt)("del",{parentName:"h3"},"getLocationSrv")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Deprecated in favor of ",(0,l.kt)("a",{parentName:"em",href:"#locationservice"},"locationService"))),(0,l.kt)("p",null,"Used to retrieve the LocationSrv that can be used to update the template variables."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"htmlGraphics.getLocationSrv().update({\n  query: {\n    'var-randomVariable': 'randomValue',\n  },\n  partial: true,\n  replace: false,\n});\n")),(0,l.kt)("h3",{id:"locationservice"},"locationService"),(0,l.kt)("p",null,"A wrapper to help work with browser location and history"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"htmlGraphics.locationService.partial(\n  {\n    'var-randomVariable': 'randomValue',\n  },\n  true // replace: true tells Grafana to update the current URL state, rather than creating a new history entry.\n);\n")),(0,l.kt)("h3",{id:"props"},"props"),(0,l.kt)("p",null,"Containing all the props from the panel PanelProps"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.props);\n")),(0,l.kt)("h3",{id:"width"},"width"),(0,l.kt)("p",null,"The width of the panel"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.width);\n")),(0,l.kt)("h3",{id:"height"},"height"),(0,l.kt)("p",null,"The height of the panel"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.height);\n")),(0,l.kt)("h3",{id:"getfielddisplayvalues"},"getFieldDisplayValues"),(0,l.kt)("p",null,"This is the same command which is used for mutating calcs in the Value options ",(0,l.kt)("a",{parentName:"p",href:"/docs/options#mutate-calcs"},"Mutate calcs"),"."),(0,l.kt)("p",null,"This command returns a list of the values specified in the reduceOptions."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"If nothing is specified it will use the same options as the ",(0,l.kt)("a",{parentName:"em",href:"/docs/options#mutate-calcs"},"Mutate calcs")," and ",(0,l.kt)("a",{parentName:"em",href:"#props"},"props"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log(htmlGraphics.getFieldDisplayValues({ reduceOptions: { calcs: ['last', 'first'] } }));\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Field display values",src:a(1084).Z,width:"684",height:"437"})),(0,l.kt)("h3",{id:"fielddisplayvalues"},"fieldDisplayValues"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/options#mutate-calcs"},"Mutate calcs")," uses ",(0,l.kt)("a",{parentName:"p",href:"#getfielddisplayvalues"},"getFieldDisplayValues")," to mutate the calcs and this is the returned values."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log(htmlGraphics.fieldDisplayValues);\n")),(0,l.kt)("h3",{id:"fieldreducers"},"fieldReducers"),(0,l.kt)("p",null,"A list of the reducers."),(0,l.kt)("p",null,"Useful for checking the calcs properties."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log(htmlGraphics.fieldReducers);\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Field display values",src:a(5890).Z,width:"1088",height:"513"})),(0,l.kt)("h2",{id:"htmlnode-global"},"htmlNode (global)"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot"},"ShadowRoot")," which contains the elements added in the HTML/SVG document (works similarly to document)."),(0,l.kt)("p",null,"Used to get elements and their properties."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const randomTextElt = htmlNode.querySelector('#random-text-elt');\nrandomTextElt.textContent = 'Something';\nrandomTextElt.style.fill = '#08f';\n")),(0,l.kt)("h3",{id:"panelupdate-event"},"panelupdate event"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"panelupdate")," triggers when new data is available (like onRender)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function onPanelUpdate() {\n  console.log(data);\n}\n\nhtmlNode.addEventListener('panelupdate', onPanelUpdate); // Triggers when new data is available (like onRender)\nhtmlNode.onpanelupdate = onPanelUpdate; // A function that triggers at the same time as the panelupdate event\n")),(0,l.kt)("p",null,"Because of the panelupdate event, frameworks like ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/"},"React"),", ",(0,l.kt)("a",{parentName:"p",href:"https://svelte.dev/"},"Svelte"),", ETC are easier to work with. Check out the ",(0,l.kt)("a",{parentName:"p",href:"/docs/projects#bundlers"},"Bundlers")," for more information."),(0,l.kt)("h3",{id:"panelwillunmount-event"},"panelwillunmount event"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"panelwillunmount")," triggers when the panel will unmount ",(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-component.html#componentwillunmount"},"componentWillUnmount"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function onPanelWillUnmount() {\n  console.log('Bye');\n}\n\nhtmlNode.addEventListener('panelwillunmount', onPanelWillUnmount);\nhtmlNode.onpanelwillunmount = onPanelWillUnmount;\n")),(0,l.kt)("h2",{id:"customproperties-global"},"customProperties (global)"),(0,l.kt)("p",null,"The parsed json object ",(0,l.kt)("em",{parentName:"p"},"(also available as a JSON string in options.codeData)")," from the Custom properties option ",(0,l.kt)("em",{parentName:"p"},"(named codeData in the options for backwards compatibility)"),"."),(0,l.kt)("p",null,"Used to get the json object values."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Custom properties")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "something": true\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"// onRender or onInit\n\nconsole.log(customProperties.something); // true\n")),(0,l.kt)("h2",{id:"codedata-global"},"codeData (global)"),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"codeData is deprecated. Use customProperties instead.")),(0,l.kt)("p",null,"Same as ",(0,l.kt)("a",{parentName:"p",href:"#customproperties-global"},"customProperties")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Custom properties")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "something": true\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"// onRender or onInit\n\nconsole.log(codeData.something); // true\n")),(0,l.kt)("h2",{id:"data-global"},"data (global)"),(0,l.kt)("p",null,"The PanelData interface passed into the panel by Grafana."),(0,l.kt)("p",null,"Can be used to retrieve metric values."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"// Used in onRender as it updates every time new data is available\nconst getMetricByName = (metricName, noDataValue = 'No data') => {\n  const filteredSeries = data.series.filter((series) => series.name == metricName);\n  if (filteredSeries.length > 0) {\n    return filteredSeries[0].fields[1].state.calcs.last;\n  }\n  return noDataValue;\n};\n\ngetMetricByName('random-metric-name');\n")),(0,l.kt)("h2",{id:"options-global"},"options (global)"),(0,l.kt)("p",null,"The options object."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(options);\n\n// Looks something like this, when logged in the console.\n\n{\n  SVGBaseFix: true,\n  add100Percentage: true,\n  centerAlignContent: true,\n  codeData: "{\\"randomKey\\": \\"randomValue\\"}",\n  css: undefined,\n  html: undefined,\n  onInit: "console.log(options)",\n  onRender: undefined,\n  ...\n}\n')),(0,l.kt)("h2",{id:"theme-global"},"theme (global)"),(0,l.kt)("p",null,"The GrafanaTheme object. It stores the current theme (light/dark), colors used by grafana, ETC."),(0,l.kt)("p",null,"Very useful when you're making a dark mode and light mode."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const darkTheme = () => {\n  ...\n};\n\nif (theme.isDark) {\n  darkTheme();\n}\n")),(0,l.kt)("h2",{id:"gettemplatesrv-global"},"getTemplateSrv (global)"),(0,l.kt)("p",null,"Used to retrieve the TemplateSrv that can be used to fetch available template variables."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"getTemplateSrv().replace(`$randomVariable`);\n")),(0,l.kt)("h2",{id:"getlocationsrv-global"},(0,l.kt)("del",{parentName:"h2"},"getLocationSrv (global)")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Deprecated in favor of ",(0,l.kt)("a",{parentName:"em",href:"#locationservice"},"locationService"))),(0,l.kt)("p",null,"Used to retrieve the LocationSrv that can be used to update the template variables."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"getLocationSrv().update({\n  query: {\n    'var-randomVariable': 'randomValue',\n  },\n  partial: true,\n  replace: false,\n});\n")))}d.isMDXComponent=!0},1084:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/field-display-values-ff442419be2722b40142afc4cc66da76.png"},5890:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/field-reducers-7910f83f7b3d167e3e94d39dd1d8f5fa.png"}}]);