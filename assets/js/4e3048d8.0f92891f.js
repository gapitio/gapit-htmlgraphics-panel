"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[92],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(n),p=o,f=u["".concat(l,".").concat(p)]||u[p]||m[p]||r;return n?a.createElement(f,s(s({ref:t},c),{},{components:n})):a.createElement(f,s({ref:t},c))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var d=2;d<r;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9808:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return d},assets:function(){return c},toc:function(){return m},default:function(){return p}});var a=n(3117),o=n(102),r=(n(7294),n(3905)),s=["components"],i={id:"export-to-csv",title:"Export to CSV"},l=void 0,d={unversionedId:"examples/export-to-csv",id:"examples/export-to-csv",title:"Export to CSV",description:"Huge thanks to neshorg (Grafana profile) for the original post.",source:"@site/docs/examples/export-to-csv.md",sourceDirName:"examples",slug:"/examples/export-to-csv",permalink:"/docs/examples/export-to-csv",editUrl:"https://github.com/gapitio/gapit-htmlgraphics-panel/edit/main/website/docs/examples/export-to-csv.md",tags:[],version:"current",frontMatter:{id:"export-to-csv",title:"Export to CSV"},sidebar:"docsSidebar",previous:{title:"Dynamic height and width",permalink:"/docs/examples/dynamic-height-and-width"},next:{title:"Font example",permalink:"/docs/examples/font-example"}},c={},m=[],u={toc:m};function p(e){var t=e.components,i=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Huge thanks to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/neshorg"},"neshorg")," (",(0,r.kt)("a",{parentName:"p",href:"https://community.grafana.com/u/neshorg/"},"Grafana profile"),") for the ",(0,r.kt)("a",{parentName:"p",href:"https://community.grafana.com/t/download-csv-button/38688/6?u=zuperzee"},"original post"),"."))),(0,r.kt)("p",null,(0,r.kt)("img",{loading:"lazy",alt:"Example: export to CSV",src:n(9394).Z,width:"992",height:"681"})),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Some data sources needs some tweaks to work. Please ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gapitio/gapit-htmlgraphics-panel/issues/new/choose"},"create an issue")," on which data sources doesn't work so it can be listed. Thanks :D"))),(0,r.kt)("p",null,"This works by using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/references#data-global"},"data object"),", which makes it possible to use ",(0,r.kt)("em",{parentName:"p"},"most")," data sources provided by Grafana."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},'The query can be "hidden" by pressing the "Enable/disable query" button ',(0,r.kt)("em",{parentName:"p"},"(small eye icon)"),". Which makes the query not run until the button is pressed."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Remember to add a query!!!")),(0,r.kt)("p",null,"Example query using the influx database:\n",(0,r.kt)("img",{loading:"lazy",alt:"Example: export to CSV query",src:n(7903).Z,width:"1084",height:"395"})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"HTML/SVG")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<button>Export to CSV</button>\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"onInit")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const btn = htmlNode.querySelector('button');\n\nconst timeoutLength = 3000;\nconst defaultButtonText = 'Export to CSV';\n\nconst toCsv = (resultsData) => {\n  const [\n    {\n      frames: [\n        {\n          schema: { fields },\n          data: { values },\n        },\n      ],\n    },\n  ] = Object.values(resultsData.results);\n\n  if (values.length <= 0) {\n    btn.textContent = 'Export failed... (Found no values).';\n    console.warn('Got no values');\n    return;\n  }\n\n  // Ensure time is first\n  const orderFieldsAndValues = (values, fields) => {\n    const timeIndex = fields.findIndex(({ type, name }) => [type, name.toLowerCase()].includes('time'));\n    const timeField = fields[timeIndex];\n    const timeValues = values[timeIndex].map((v) => new Date(v).toISOString()); // Format time as iso string\n\n    const orderedFields = [timeField, ...fields.filter((_, i) => i !== timeIndex)];\n    const orderedValues = [timeValues, ...values.filter((_, i) => i !== timeIndex)];\n    return { orderedFields, orderedValues };\n  };\n\n  const { orderedFields, orderedValues } = orderFieldsAndValues(values, fields);\n\n  const fieldNames = orderedFields.map((field) => field.name);\n  const [first, ...rest] = orderedValues; // Need first for indexing\n  const csv = [\n    fieldNames.join(','),\n    ...first.map((firstValue, i) => [firstValue, ...rest.map((v) => v[i])].join(',')),\n  ].join('\\r\\n');\n\n  return csv;\n};\n\nconst saveCsvFile = (csv, filename) => {\n  const elt = document.createElement('a');\n  elt.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv));\n  elt.setAttribute('download', filename);\n\n  elt.style.display = 'none';\n  htmlNode.appendChild(elt);\n\n  elt.click();\n\n  htmlNode.removeChild(elt);\n};\n\nbtn.onclick = () => {\n  clearTimeout(btn.timeout);\n  btn.textContent = 'Exporting...';\n  // The refId (query name) only updates after a page refresh.\n  const [{ query, refId, datasource }] = data.request.targets;\n  const { from, to } = data.timeRange;\n\n  const filename = [refId, from.toISOString(), to.toISOString()].join('-') + '.csv';\n\n  const body = {\n    queries: [\n      {\n        datasource,\n        query,\n        refId,\n        intervalMs: 0,\n        maxDataPoints: 1e9, // 1E9 = 1_000_000_000 (Max allowed 1E20)\n      },\n    ],\n    from: String(from.valueOf()),\n    to: String(to.valueOf()),\n  };\n\n  fetch('/api/ds/query', {\n    headers: {\n      'cache-control': 'no-cache',\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify(body),\n    method: 'POST',\n  })\n    .then((res) =>\n      res.json().then((data) => {\n        const csv = toCsv(data);\n        if (csv) {\n          saveCsvFile(toCsv(data), filename);\n          btn.textContent = 'Export finished';\n        }\n\n        btn.timeout = setTimeout(() => {\n          btn.textContent = defaultButtonText;\n        }, timeoutLength);\n      })\n    )\n    .catch((e) => {\n      btn.textContent = 'Export failed... (Failed retrieving data)';\n      console.warn(e);\n\n      btn.timeout = setTimeout(() => {\n        btn.textContent = defaultButtonText;\n      }, timeoutLength);\n    });\n};\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Panel options")," (import/export)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "add100Percentage": true,\n  "centerAlignContent": true,\n  "overflow": "visible",\n  "SVGBaseFix": true,\n  "codeData": "{\\n  \\"text\\": \\"Random text\\"\\n}",\n  "rootCSS": "",\n  "css": "* {\\n  font-family: Open Sans;\\n}\\n",\n  "html": "<button>Export to CSV</button>",\n  "renderOnMount": true,\n  "onRender": "",\n  "dynamicHtmlGraphics": false,\n  "dynamicData": true,\n  "dynamicFieldDisplayValues": false,\n  "dynamicProps": false,\n  "panelupdateOnMount": true,\n  "onInitOnResize": false,\n  "onInit": "const btn = htmlNode.querySelector(\'button\');\\n\\nconst timeoutLength = 3000;\\nconst defaultButtonText = \'Export to CSV\';\\n\\nconst toCsv = (resultsData) => {\\n  const [\\n    {\\n      frames: [\\n        {\\n          schema: { fields },\\n          data: { values },\\n        },\\n      ],\\n    },\\n  ] = Object.values(resultsData.results);\\n\\n  if (values.length <= 0) {\\n    btn.textContent = \'Export failed... (Found no values).\';\\n    console.warn(\'Got no values\');\\n    return;\\n  }\\n\\n  // Ensure time is first\\n  const orderFieldsAndValues = (values, fields) => {\\n    const timeIndex = fields.findIndex(({ type, name }) => [type, name.toLowerCase()].includes(\'time\'));\\n    const timeField = fields[timeIndex];\\n    const timeValues = values[timeIndex].map((v) => new Date(v).toISOString()); // Format time as iso string\\n\\n    const orderedFields = [timeField, ...fields.filter((_, i) => i !== timeIndex)];\\n    const orderedValues = [timeValues, ...values.filter((_, i) => i !== timeIndex)];\\n    return { orderedFields, orderedValues };\\n  };\\n\\n  const { orderedFields, orderedValues } = orderFieldsAndValues(values, fields);\\n\\n  const fieldNames = orderedFields.map((field) => field.name);\\n  const [first, ...rest] = orderedValues; // Need first for indexing\\n  const csv = [\\n    fieldNames.join(\',\'),\\n    ...first.map((firstValue, i) => [firstValue, ...rest.map((v) => v[i])].join(\',\')),\\n  ].join(\'\\\\r\\\\n\');\\n\\n  return csv;\\n};\\n\\nconst saveCsvFile = (csv, filename) => {\\n  const elt = document.createElement(\'a\');\\n  elt.setAttribute(\'href\', \'data:text/csv;charset=utf-8,\' + encodeURIComponent(csv));\\n  elt.setAttribute(\'download\', filename);\\n\\n  elt.style.display = \'none\';\\n  htmlNode.appendChild(elt);\\n\\n  elt.click();\\n\\n  htmlNode.removeChild(elt);\\n};\\n\\nbtn.onclick = () => {\\n  clearTimeout(btn.timeout);\\n  btn.textContent = \'Exporting...\';\\n  // The refId (query name) only updates after a page refresh.\\n  const [{ query, refId, datasource }] = data.request.targets;\\n  const { from, to } = data.timeRange;\\n\\n  const filename = [refId, from.toISOString(), to.toISOString()].join(\'-\') + \'.csv\';\\n\\n  const body = {\\n    queries: [\\n      {\\n        datasource,\\n        query,\\n        refId,\\n        intervalMs: 0,\\n        maxDataPoints: 1e9, // 1E9 = 1_000_000_000 (Max allowed 1E20)\\n      },\\n    ],\\n    from: String(from.valueOf()),\\n    to: String(to.valueOf()),\\n  };\\n\\n  fetch(\'/api/ds/query\', {\\n    headers: {\\n      \'cache-control\': \'no-cache\',\\n      \'content-type\': \'application/json\',\\n    },\\n    body: JSON.stringify(body),\\n    method: \'POST\',\\n  })\\n    .then((res) =>\\n      res.json().then((data) => {\\n        const csv = toCsv(data);\\n        if (csv) {\\n          saveCsvFile(toCsv(data), filename);\\n          btn.textContent = \'Export finished\';\\n        }\\n\\n        btn.timeout = setTimeout(() => {\\n          btn.textContent = defaultButtonText;\\n        }, timeoutLength);\\n      })\\n    )\\n    .catch((e) => {\\n      btn.textContent = \'Export failed... (Failed retrieving data)\';\\n      console.warn(e);\\n\\n      btn.timeout = setTimeout(() => {\\n        btn.textContent = defaultButtonText;\\n      }, timeoutLength);\\n    });\\n};"\n}\n')))}p.isMDXComponent=!0},9394:function(e,t,n){t.Z=n.p+"assets/images/example-export-to-csv-2d992219e42fa4fc742ec2ce58fc787e.gif"},7903:function(e,t,n){t.Z=n.p+"assets/images/example-export-to-csv-query-e0e937f22f4e5a2e2f381e0d018baa43.png"}}]);