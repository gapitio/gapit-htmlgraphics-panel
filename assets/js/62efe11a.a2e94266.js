"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[899],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return n?o.createElement(f,s(s({ref:t},u),{},{components:n})):o.createElement(f,s({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9936:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={id:"export-to-csv-influx1.8",title:"Export to CSV (influx1.8)"},s=void 0,i={unversionedId:"examples/export-to-csv/export-to-csv-influx1.8",id:"examples/export-to-csv/export-to-csv-influx1.8",title:"Export to CSV (influx1.8)",description:"Check out the Export to CSV index page for a more detailed explanation of the approach",source:"@site/docs/examples/export-to-csv/influx1.8.md",sourceDirName:"examples/export-to-csv",slug:"/examples/export-to-csv/export-to-csv-influx1.8",permalink:"/docs/examples/export-to-csv/export-to-csv-influx1.8",draft:!1,editUrl:"https://github.com/gapitio/gapit-htmlgraphics-panel/edit/main/website/docs/examples/export-to-csv/influx1.8.md",tags:[],version:"current",frontMatter:{id:"export-to-csv-influx1.8",title:"Export to CSV (influx1.8)"},sidebar:"docsSidebar",previous:{title:"Export to CSV",permalink:"/docs/examples/export-to-csv/"},next:{title:"Export to CSV (influx2)",permalink:"/docs/examples/export-to-csv/export-to-csv-influx2"}},l={},c=[],u={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Check out the ",(0,a.kt)("a",{parentName:"p",href:"/docs/examples/export-to-csv/"},"Export to CSV index page")," for a more detailed explanation of the approach")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Example: export to CSV",src:n(9394).Z,width:"992",height:"681"})),(0,a.kt)("p",null,"This works by using the ",(0,a.kt)("a",{parentName:"p",href:"/docs/references#data-global"},"data object"),", which makes it possible to use ",(0,a.kt)("em",{parentName:"p"},"most")," data sources provided by Grafana."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},'The query can be "hidden" by pressing the "Enable/disable query" button ',(0,a.kt)("em",{parentName:"p"},"(small eye icon)"),". Which will disable the query (for better performance).")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Remember to add a query!!!")),(0,a.kt)("p",null,"Example query using the influx1.8 database:\n",(0,a.kt)("img",{alt:"Example: export to CSV query",src:n(5125).Z,width:"770",height:"160"})),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"HTML/SVG")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<button>Export to CSV</button>\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onInit")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const btn = htmlNode.querySelector('button');\n\nconst timeoutLength = 3000;\nconst defaultButtonText = 'Export to CSV';\n\nconst toCsv = (resultsData) => {\n  const [\n    {\n      series: [{ columns, values }],\n    },\n  ] = Object.values(resultsData.results);\n\n  if (values.length <= 0 || columns.length <= 0) {\n    btn.textContent = 'Export failed... (Found no values).';\n    console.warn('Got no values');\n    return;\n  }\n\n  const csv = [\n    columns.join(','),\n    ...values.map((v) => {\n      const [timeField, ...rest] = v;\n      const time = new Date(timeField).toISOString();\n      return [time, ...rest].join(',');\n    }),\n  ].join('\\r\\n');\n\n  return csv;\n};\n\nconst saveCsvFile = (csv, filename) => {\n  const elt = document.createElement('a');\n  elt.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv));\n  elt.setAttribute('download', filename);\n  elt.style.display = 'none';\n  htmlNode.appendChild(elt);\n  elt.click();\n  htmlNode.removeChild(elt);\n};\n\nbtn.onclick = () => {\n  clearTimeout(btn.timeout);\n  btn.textContent = 'Exporting...';\n  // The refId (query name) only updates after a page refresh.\n  const [{ query, refId, datasource }] = data.request.targets;\n  const { from, to } = data.timeRange;\n  const datasourceData = Object.values(grafanaBootData.settings.datasources).find((d) => d.uid === datasource.uid);\n  const datasourceUrl = datasourceData.url;\n  const db = datasourceData.database;\n  const timeFilter = data.request.scopedVars.timeFilter.value;\n  const q = getTemplateSrv().replace(query).replace('$timeFilter', timeFilter);\n\n  const filename = [refId, from.toISOString(), to.toISOString()].join('-') + '.csv';\n\n  const params = new URLSearchParams({\n    db: db,\n    q: q,\n    epoch: 'ms',\n  });\n\n  fetch(datasourceUrl + '/query?' + params.toString(), {\n    headers: {\n      'cache-control': 'no-cache',\n    },\n  })\n    .then((res) => res.json())\n    .then((data) => {\n      const csv = toCsv(data);\n      if (csv) {\n        saveCsvFile(toCsv(data), filename);\n        btn.textContent = 'Export finished';\n      }\n\n      btn.timeout = setTimeout(() => {\n        btn.textContent = defaultButtonText;\n      }, timeoutLength);\n    })\n    .catch((e) => {\n      btn.textContent = 'Export failed... (Failed retrieving data)';\n      console.warn(e);\n\n      btn.timeout = setTimeout(() => {\n        btn.textContent = defaultButtonText;\n      }, timeoutLength);\n    });\n};\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Panel options")," (import/export)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "add100Percentage": true,\n  "centerAlignContent": true,\n  "overflow": "visible",\n  "SVGBaseFix": true,\n  "codeData": "{\\n  \\"text\\": \\"Random text\\"\\n}",\n  "rootCSS": "",\n  "css": "* {\\n  font-family: Open Sans;\\n}\\n",\n  "html": "<button>Export to CSV</button>",\n  "renderOnMount": true,\n  "onRender": "",\n  "dynamicHtmlGraphics": false,\n  "dynamicData": true,\n  "dynamicFieldDisplayValues": false,\n  "dynamicProps": false,\n  "panelupdateOnMount": true,\n  "onInitOnResize": false,\n  "onInit": "const btn = htmlNode.querySelector(\\"button\\");\\n\\nconst timeoutLength = 3000;\\nconst defaultButtonText = \\"Export to CSV\\";\\n\\nconst toCsv = (resultsData) => {\\n  const [\\n    {\\n      series: [{ columns, values }],\\n    },\\n  ] = Object.values(resultsData.results);\\n\\n  if (values.length <= 0 || columns.length <= 0) {\\n    btn.textContent = \\"Export failed... (Found no values).\\";\\n    console.warn(\\"Got no values\\");\\n    return;\\n  }\\n\\n  const csv = [\\n    columns.join(\\",\\"),\\n    ...values.map((v) => {\\n      const [timeField, ...rest] = v;\\n      const time = new Date(timeField).toISOString();\\n      return [time, ...rest].join(\\",\\");\\n    }),\\n  ].join(\\"\\\\r\\\\n\\");;\\n\\n  return csv;\\n};\\n\\nconst saveCsvFile = (csv, filename) => {\\n  const elt = document.createElement(\\"a\\");\\n  elt.setAttribute(\\n    \\"href\\",\\n    \\"data:text/csv;charset=utf-8,\\" + encodeURIComponent(csv)\\n  );\\n  elt.setAttribute(\\"download\\", filename);\\n  elt.style.display = \\"none\\";\\n  htmlNode.appendChild(elt);\\n  elt.click();\\n  htmlNode.removeChild(elt);\\n};\\n\\nbtn.onclick = () => {\\n  clearTimeout(btn.timeout);\\n  btn.textContent = \\"Exporting...\\";\\n  // The refId (query name) only updates after a page refresh.\\n  const [{ query, refId, datasource }] = data.request.targets;\\n  const { from, to } = data.timeRange;\\n  const datasourceData = Object.values(\\n    grafanaBootData.settings.datasources\\n  ).find((d) => d.uid === datasource.uid);\\n  const datasourceUrl = datasourceData.url;\\n  const db = datasourceData.database;\\n  const timeFilter = data.request.scopedVars.timeFilter.value;\\n  const q = getTemplateSrv().replace(query).replace(\\"$timeFilter\\", timeFilter);\\n\\n  const filename =\\n    [refId, from.toISOString(), to.toISOString()].join(\\"-\\") + \\".csv\\";\\n\\n  const params = new URLSearchParams({\\n    db: db,\\n    q: q,\\n    epoch: \\"ms\\",\\n  });\\n\\n  fetch(datasourceUrl + \\"/query?\\" + params.toString(), {\\n    headers: {\\n      \\"cache-control\\": \\"no-cache\\",\\n    },\\n  })\\n    .then((res) => res.json())\\n    .then((data) => {\\n      const csv = toCsv(data);\\n      if (csv) {\\n        saveCsvFile(toCsv(data), filename);\\n        btn.textContent = \\"Export finished\\";\\n      }\\n\\n      btn.timeout = setTimeout(() => {\\n        btn.textContent = defaultButtonText;\\n      }, timeoutLength);\\n    })\\n    .catch((e) => {\\n      btn.textContent = \\"Export failed... (Failed retrieving data)\\";\\n      console.warn(e);\\n\\n      btn.timeout = setTimeout(() => {\\n        btn.textContent = defaultButtonText;\\n      }, timeoutLength);\\n    });\\n};\\n"\n}\n')))}p.isMDXComponent=!0},9394:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/example-export-to-csv-2d992219e42fa4fc742ec2ce58fc787e.gif"},5125:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/example-export-to-csv-influx1.8-query-93d2c26a2cb30db218de3fdd138579e1.png"}}]);