"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[358],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(a),u=r,f=m["".concat(o,".").concat(u)]||m[u]||p[u]||i;return a?n.createElement(f,l(l({ref:t},d),{},{components:a})):n.createElement(f,l({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8216:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={id:"dynamic-variables",title:"Dynamic variables"},l=void 0,s={unversionedId:"advanced/dynamic-variables",id:"advanced/dynamic-variables",title:"Dynamic variables",description:"Check out this article about mutations Arrays, Objects and Mutations",source:"@site/docs/advanced/dynamic-variables.mdx",sourceDirName:"advanced",slug:"/advanced/dynamic-variables",permalink:"/docs/advanced/dynamic-variables",draft:!1,editUrl:"https://github.com/gapitio/gapit-htmlgraphics-panel/edit/main/website/docs/advanced/dynamic-variables.mdx",tags:[],version:"current",frontMatter:{id:"dynamic-variables",title:"Dynamic variables"},sidebar:"docsSidebar",previous:{title:"Update grafana variable example",permalink:"/docs/examples/update-grafana-variable-example"},next:{title:"Performance",permalink:"/docs/performance"}},o={},c=[{value:"Example 1",id:"example-1",level:2}],d={toc:c};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Check out this article about mutations ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/@fknussel/arrays-objects-and-mutations-6b23348b54aa"},"Arrays, Objects and Mutations"))),(0,r.kt)("p",null,"Dynamic variables basically means the variable mutates. Mutations basically means the variable changes (",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/@fknussel/arrays-objects-and-mutations-6b23348b54aa"},"A good article about mutations"),")."),(0,r.kt)("p",null,"Because it mutates there are some stuff to be careful about. The main thing is where you copy the variable from."),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Panel json"),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "calcsMutation": "standard",\n  "reduceOptions": {\n    "calcs": [\n      "lastNotNull",\n      "last",\n      "first",\n      "firstNotNull",\n      "min",\n      "max",\n      "mean",\n      "sum",\n      "count",\n      "range",\n      "delta",\n      "step",\n      "diff",\n      "logmin",\n      "allIsZero",\n      "allIsNull",\n      "diffperc"\n    ]\n  },\n  "add100Percentage": true,\n  "centerAlignContent": true,\n  "overflow": "visible",\n  "SVGBaseFix": true,\n  "codeData": "{\\n  \\"text\\": \\"Random text\\"\\n}",\n  "rootCSS": "",\n  "css": "* {\\n  font-family: Open Sans;\\n}\\n\\n.box {\\n  border: solid #555 2px;\\n  border-radius: 10px;\\n  padding: 10px 20px;\\n}\\n",\n  "html": "",\n  "renderOnMount": true,\n  "onRender": "",\n  "dynamicHtmlGraphics": true,\n  "dynamicData": false,\n  "dynamicFieldDisplayValues": false,\n  "dynamicProps": false,\n  "panelupdateOnMount": true,\n  "onInitOnResize": false,\n  "onInit": "console.log(\\"ONINIT RELOAD\\");\\n\\nconst data1 = htmlGraphics.data;\\n\\nfunction update() {\\n  console.log(\\"htmlGraphics\\", htmlGraphics.data.series[0].fields[1].state.calcs.last);\\n  console.log(\\"data1\\", data1.series[0].fields[1].state.calcs.last);\\n}\\n\\nhtmlNode.addEventListener(\\"panelupdate\\", update);\\n"\n}\n')))),(0,r.kt)("p",null,"Let's say the first time you refresh the value is 10 and the second time the value is 20."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"onInit")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"console.log('ONINIT RELOAD');\n\nconst data1 = htmlGraphics.data;\n\nfunction update() {\n  console.log('htmlGraphics', htmlGraphics.data.series[0].fields[1].state.calcs.last);\n  console.log('data1', data1.series[0].fields[1].state.calcs.last);\n}\n\nhtmlNode.addEventListener('panelupdate', update);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Console")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"htmlGraphics 10\ndata1 10\n\nhtmlGraphics 20\ndata1 10\n")),(0,r.kt)("p",null,"Notice the first time it logs both htmlGraphics and data1 are 10, but the second time htmlGraphics is 20 and data1 is 10. The reason for this is because ",(0,r.kt)("inlineCode",{parentName:"p"},"htmlGraphics.data")," is assigned to ",(0,r.kt)("inlineCode",{parentName:"p"},"data1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"htmlGraphics")," is the one with the dynamic variable."),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"data1")," to be dynamic ",(0,r.kt)("a",{parentName:"p",href:"/docs/options#dynamic-data"},"Dynamic data object")," must be true."))}p.isMDXComponent=!0}}]);