"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[308],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=d(n),u=l,m=c["".concat(s,".").concat(u)]||c[u]||h[u]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,o=new Array(i);o[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[c]="string"==typeof e?e:l,o[1]=r;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4430:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var a=n(7462),l=(n(7294),n(3905));const i={id:"options",title:"Options"},o=void 0,r={unversionedId:"options",id:"options",title:"Options",description:"Value options",source:"@site/docs/options.md",sourceDirName:".",slug:"/options",permalink:"/docs/options",draft:!1,editUrl:"https://github.com/gapitio/gapit-htmlgraphics-panel/edit/main/website/docs/options.md",tags:[],version:"current",frontMatter:{id:"options",title:"Options"},sidebar:"docsSidebar",previous:{title:"Quick start",permalink:"/docs/quick-start"},next:{title:"References",permalink:"/docs/references"}},s={},d=[{value:"Value options",id:"value-options",level:2},{value:"Mutate calcs",id:"mutate-calcs",level:3},{value:"HTML graphics",id:"html-graphics",level:2},{value:"Fit content to panel",id:"fit-content-to-panel",level:3},{value:"Center align content",id:"center-align-content",level:3},{value:"Overflow",id:"overflow",level:3},{value:"Use Grafana scrollbar",id:"use-grafana-scrollbar",level:3},{value:"Root CSS",id:"root-css",level:3},{value:"CSS",id:"css",level:3},{value:"HTML/SVG document",id:"htmlsvg-document",level:3},{value:"Run onRender when mounted",id:"run-onrender-when-mounted",level:3},{value:"onRender",id:"onrender",level:3},{value:"Dynamic htmlGraphics",id:"dynamic-htmlgraphics",level:3},{value:"Dynamic data",id:"dynamic-data",level:3},{value:"Dynamic fieldDisplayValues",id:"dynamic-fielddisplayvalues",level:3},{value:"Dynamic props",id:"dynamic-props",level:3},{value:"Trigger panelupdate when mounted",id:"trigger-panelupdate-when-mounted",level:3},{value:"Trigger onInit on resize",id:"trigger-oninit-on-resize",level:3},{value:"onInit",id:"oninit",level:3},{value:"Polyfill",id:"polyfill",level:2},{value:"SVG base fix",id:"svg-base-fix",level:3},{value:"Custom properties",id:"custom-properties",level:2},{value:"Edit as JSON",id:"edit-as-json",level:3},{value:"Import/export",id:"importexport",level:2}],p={toc:d};function c(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"value-options"},"Value options"),(0,l.kt)("h3",{id:"mutate-calcs"},"Mutate calcs"),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Reducer id and calcs are sometimes referred to as the same thing. Calcs here are referred to as the values in the calcs object inside the ",(0,l.kt)("a",{parentName:"p",href:"/docs/references#data-global"},"data object"),".")),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Mutate calcs doesn't remove existing calcs added by Grafana. It only adds to it."),(0,l.kt)("p",{parentName:"admonition"},'Changing from "All calcs" to "No mutation" will show all calcs until the dashboard is refreshed. ',(0,l.kt)("em",{parentName:"p"},'The data object needs to be updated to remove "previous" calcs'))),(0,l.kt)("p",null,"This option is useful because some data sources don't add the desired calcs (some don't add calcs at all), which sometimes makes it harder to get the desired value from this plugin."),(0,l.kt)("p",null,"Calcs like max, min, diff, ETC are added with any calcs, which means that only some custom calcs are allowed."),(0,l.kt)("p",null,"You can check the calcs properties with ",(0,l.kt)("a",{parentName:"p",href:"/docs/references#fieldreducers"},"fieldReducers"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Standard calcs")," ",(0,l.kt)("em",{parentName:"p"},"(calcs with ",(0,l.kt)("inlineCode",{parentName:"em"},"{standard: true}"),")")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "allIsNull": false,\n  "allIsZero": false,\n  "count": 1081,\n  "delta": 5160.296223387697,\n  "diff": -27.562124876418547,\n  "diffperc": -0.7987191943927379,\n  "first": 34.50790349088066,\n  "firstNotNull": 34.50790349088066,\n  "last": 6.945778614462109,\n  "lastNotNull": 6.945778614462109,\n  "logmin": 6.606859716238607,\n  "max": 35.886042023999536,\n  "mean": 19.436556881379083,\n  "min": 6.606859716238607,\n  "nonNullCount": 1081,\n  "previousDeltaUp": false,\n  "range": 29.27918230776093,\n  "step": -0.4993308915394312,\n  "sum": 21010.917988770787\n}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"All calcs")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "allIsNull": false,\n  "allIsZero": false,\n  "count": 720,\n  "delta": -715.3035540645247,\n  "diff": -7.021496923427495,\n  "diffperc": -4.946144132468452,\n  "first": 1.4195900352631468,\n  "firstNotNull": 1.4195900352631468,\n  "last": -5.601906888164349,\n  "lastNotNull": -5.601906888164349,\n  "logmin": 0.07720417385470929,\n  "max": 3.184124812796603,\n  "mean": -4.219071496932824,\n  "min": -11.131454766473656,\n  "nonNullCount": 720,\n  "previousDeltaUp": false,\n  "range": 14.31557957927026,\n  "step": -0.49997734159248264,\n  "sum": -3037.7314777916336,\n\n  // Different from standard\n  "allValues": [\n    1.4195900352631468,\n    1.6835262754797644,\n    1.655662138180408,\n    ... // 717 more values\n  ],\n  "changeCount": 719,\n  "distinctCount": 720,\n}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"allValues"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"changeCount"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"distinctCount")," are not standard calcs."),(0,l.kt)("h2",{id:"html-graphics"},"HTML graphics"),(0,l.kt)("h3",{id:"fit-content-to-panel"},"Fit content to panel"),(0,l.kt)("p",null,"It's mainly for SVG, as it will scale the content based on the panel size.\nAdds the height and width of the first element to 100% in the HTML/SVG code."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- style is not needed here. It\'s only used to show that it overwrites the existing style as well. --\x3e\n<div style="height: 10px">First element</div>\n<div style="height: 20px">Second element</div>\n<div style="height: 30px">Third element</div>\n')),(0,l.kt)("p",null,"becomes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<div height="100%" width="100%" style="height: 100%; width: 100%;">First element</div>\n<div style="height: 20px">Second element</div>\n<div style="height: 30px">Third element</div>\n')),(0,l.kt)("h3",{id:"center-align-content"},"Center align content"),(0,l.kt)("p",null,'Vertically and horizontally aligns the panel content to the center.\nAdds "display: flex; justify-content: center; align-items: center" to the shadow root container.'),(0,l.kt)("h3",{id:"overflow"},"Overflow"),(0,l.kt)("p",null,'Chooses what happens if content overflows outside the panel.\n"Fit content to panel" is recommended to turn on with some of these options, as some won\'t work without it.'),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://github.com/gapitio/gapit-htmlgraphics-panel/raw/879c71528a1a7360895f6b1de002b06a00f1be5b/src/img/screenshot-overflow.png",alt:"Overflow options"})),(0,l.kt)("h3",{id:"use-grafana-scrollbar"},"Use Grafana scrollbar"),(0,l.kt)("p",null,"Requires ",(0,l.kt)("a",{parentName:"p",href:"#overflow"},"Overflow")," to be ",(0,l.kt)("inlineCode",{parentName:"p"},"Visible"),". Wraps the ",(0,l.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/v9.1/packages_api/ui/customscrollbar/"},"scrollbar from Grafana")," around the ShadowRoot container."),(0,l.kt)("h3",{id:"root-css"},"Root CSS"),(0,l.kt)("p",null,"CSS loaded outside the shadow root. Useful for font faces and imports."),(0,l.kt)("p",null,"Below code imports the ",(0,l.kt)("a",{parentName:"p",href:"https://fonts.google.com/specimen/Stick+No+Bills"},"Stick No Bills")," font"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Root CSS")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"@import url('https://fonts.googleapis.com/css2?family=Stick+No+Bills:wght@200&display=swap');\n")),(0,l.kt)("p",null,"The font can be used inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"CSS")," code."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"CSS")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},"* {\n  font-family: 'Stick No Bills', sans-serif;\n}\n")),(0,l.kt)("h3",{id:"css"},"CSS"),(0,l.kt)("p",null,"The style which can be used to style the HTML/SVG document.\nGets added before to the HTML/SVG document."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},"#shadow-root\n<style>\n  /* The CSS */\n</style>\n<div>HTML/SVG document</div>\n")),(0,l.kt)("h3",{id:"htmlsvg-document"},"HTML/SVG document"),(0,l.kt)("p",null,"The html/svg code which is displayed on the panel."),(0,l.kt)("h3",{id:"run-onrender-when-mounted"},"Run onRender when mounted"),(0,l.kt)("p",null,"Run onRender when the panel is first loaded (in most cases, this should be true)"),(0,l.kt)("h3",{id:"onrender"},"onRender"),(0,l.kt)("p",null,"Executes the code every render (when new data is available)."),(0,l.kt)("h3",{id:"dynamic-htmlgraphics"},"Dynamic htmlGraphics"),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Check out ",(0,l.kt)("a",{parentName:"p",href:"/docs/advanced/dynamic-variables"},"Dynamic variables")," for more info.")),(0,l.kt)("p",null,"Updates ",(0,l.kt)("a",{parentName:"p",href:"/docs/references#htmlgraphics-global"},"htmlGraphics")," when new data is available."),(0,l.kt)("h3",{id:"dynamic-data"},"Dynamic data"),(0,l.kt)("p",null,"Updates the ",(0,l.kt)("a",{parentName:"p",href:"/docs/references#data"},"data object")," when new data is available. The code will not execute again. it will only update the ",(0,l.kt)("a",{parentName:"p",href:"/docs/references#data"},"data object"),". Dynamic data is only for onInit, onRender will update like normal."),(0,l.kt)("h3",{id:"dynamic-fielddisplayvalues"},"Dynamic fieldDisplayValues"),(0,l.kt)("p",null,"Updates ",(0,l.kt)("a",{parentName:"p",href:"/docs/references#fielddisplayvalues"},"fieldDisplayValues")," when new data is available."),(0,l.kt)("h3",{id:"dynamic-props"},"Dynamic props"),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Only values under ",(0,l.kt)("inlineCode",{parentName:"p"},"htmlGraphics.props")," becomes dynamic. Internally the ",(0,l.kt)("inlineCode",{parentName:"p"},"htmlGraphics.width")," comes from props, but it does not become dynamic because it's mapped to the int value.")),(0,l.kt)("p",null,"Updates ",(0,l.kt)("a",{parentName:"p",href:"/docs/references#props"},"props")," when new data is available."),(0,l.kt)("h3",{id:"trigger-panelupdate-when-mounted"},"Trigger panelupdate when mounted"),(0,l.kt)("p",null,"Trigger the panelupdate event (htmlNode.onpanelupdate) when the panel is first loaded (in most cases, this should be true)"),(0,l.kt)("h3",{id:"trigger-oninit-on-resize"},"Trigger onInit on resize"),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"This doesn't trigger any cleanup or ",(0,l.kt)("a",{parentName:"p",href:"/docs/references#panelwillunmount-event"},"onpanelwillunmount"),". It will only trigger ",(0,l.kt)("inlineCode",{parentName:"p"},"onInit"),".")),(0,l.kt)("p",null,"Trigger the ",(0,l.kt)("inlineCode",{parentName:"p"},"onInit")," code when the panels' width/height changes."),(0,l.kt)("p",null,"Without ",(0,l.kt)("inlineCode",{parentName:"p"},"onInitOnResize")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onInit")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// REMEMBER TO TURN DYNAMIC HTMLGRAPHICS TO TRUE\n\nconst [heightValueElt, widthValueElt] = htmlNode.querySelectorAll('.value-field');\n\n// Used to store the initial\nconst storedPanelSize = {\n  height: htmlGraphics.height,\n  width: htmlGraphics.width,\n};\n\nconst updateValueText = () => {\n  // Important that htmlGraphics.height or width is used inside the function.\n  // If height or width is destructured outside the function they will not get the new height.\n  heightValueElt.textContent = htmlGraphics.height;\n  widthValueElt.textContent = htmlGraphics.width;\n};\n\nconst updateStoredPanelSize = () => {\n  storedPanelSize.height = htmlGraphics.height;\n  storedPanelSize.width = htmlGraphics.width;\n};\n\n// Show the height and width right away.\nupdateValueText();\n\nhtmlNode.onpanelupdate = () => {\n  const isPanelSizeUpdate = !(\n    htmlGraphics.height == storedPanelSize.height && htmlGraphics.width === storedPanelSize.width\n  );\n\n  if (isPanelSizeUpdate) {\n    updateValueText();\n\n    // Update the previously stored values with the new height and witdth\n    updateStoredPanelSize();\n  }\n};\n")),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"onInitOnResize")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onInit")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// REMEMBER TO TURN DYNAMIC HTMLGRAPHICS AND TRIGGER ONINIT ON RESIZE TO TRUE\n\nconst [heightValueElt, widthValueElt] = htmlNode.querySelectorAll('.value-field');\n\nconst updateValueText = () => {\n  heightValueElt.textContent = htmlGraphics.height;\n  widthValueElt.textContent = htmlGraphics.width;\n};\n\nupdateValueText();\n")),(0,l.kt)("p",null,"Full code example ",(0,l.kt)("a",{parentName:"p",href:"/docs/examples/dynamic-height-and-width"},"dynamic-height-and-width")),(0,l.kt)("h3",{id:"oninit"},"onInit"),(0,l.kt)("p",null,"Executes when the panel loads"),(0,l.kt)("h2",{id:"polyfill"},"Polyfill"),(0,l.kt)("h3",{id:"svg-base-fix"},"SVG base fix"),(0,l.kt)("p",null,"Fixes an issue in Firefox where xlink:href needs the url to be able to find the link.\n",(0,l.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/18265336"},"https://stackoverflow.com/a/18265336"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/SVG/linking.html"},"https://www.w3.org/TR/SVG/linking.html")),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Exiting and entering edit mode may cause it break, but pressing f5 fixes it.")),(0,l.kt)("h2",{id:"custom-properties"},"Custom properties"),(0,l.kt)("p",null,"Custom properties can be used to easily change values when multiple people are working on it. E.g."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Change the range of a color."),(0,l.kt)("li",{parentName:"ul"},"Toggle between showcase and production mode to show how it would look if there were values."),(0,l.kt)("li",{parentName:"ul"},"Toggle between themes."),(0,l.kt)("li",{parentName:"ul"},"Increase the max value of a bar.")),(0,l.kt)("p",null,"Having a json file sort of as a configuration file makes it much easier to copy a panel and change some values in the json file instead of going through the javascript code."),(0,l.kt)("p",null,"Think of this scenario: You have three dashboards with similar graphics. The only difference is a value range. You can create one code for all three panels and have a configuration file (Custom properties) with the ranges. It also makes it much easier to change later on (bugs, changes, and additions) when the code is similar on all the panels."),(0,l.kt)("h3",{id:"edit-as-json"},"Edit as JSON"),(0,l.kt)("p",null,"Shows the JSON code in a code editor"),(0,l.kt)("h2",{id:"importexport"},"Import/export"),(0,l.kt)("p",null,"Import a file with the file picker ",(0,l.kt)("em",{parentName:"p"},"(a file can be dragged to it)")," or paste the json code into the code editor."),(0,l.kt)("p",null,"All the options and code can be easily copied ",(0,l.kt)("em",{parentName:"p"},"(exported)")," or imported with this."),(0,l.kt)("p",null,"The bundlers generate a panel-options.json file, making it easy to copy the generated code into the panel."))}c.isMDXComponent=!0}}]);