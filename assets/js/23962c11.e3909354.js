"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[57],{3905:function(e,a,t){t.d(a,{Zo:function(){return u},kt:function(){return m}});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),s=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},u=function(e){var a=s(e.components);return n.createElement(p.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||l;return t?n.createElement(f,i(i({ref:a},u),{},{components:t})):n.createElement(f,i({ref:a},u))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=d;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},324:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var n=t(3117),r=t(102),l=(t(7294),t(3905)),i=["components"],o={id:"update-grafana-variable-example",title:"Update grafana variable example"},p=void 0,s={unversionedId:"examples/update-grafana-variable-example",id:"examples/update-grafana-variable-example",isDocsHomePage:!1,title:"Update grafana variable example",description:"Update grafana variable example",source:"@site/docs/examples/update-grafana-variable-example.md",sourceDirName:"examples",slug:"/examples/update-grafana-variable-example",permalink:"/docs/examples/update-grafana-variable-example",editUrl:"https://github.com/gapitio/gapit-htmlgraphics-panel/edit/main/website/docs/examples/update-grafana-variable-example.md",tags:[],version:"current",frontMatter:{id:"update-grafana-variable-example",title:"Update grafana variable example"},sidebar:"docsSidebar",previous:{title:"Font example",permalink:"/docs/examples/font-example"},next:{title:"Projects",permalink:"/docs/projects"}},u=[],c={toc:u};function d(e){var a=e.components,o=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},c,o,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Update grafana variable example",src:t(4302).Z})),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"For Grafana v8.3.0+ variables used by HTMLGraphics won't update when the variable is changed unless it's wrapped in ",(0,l.kt)("inlineCode",{parentName:"p"},"${}"),"."))),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"testVariable used",src:t(998).Z})),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"HTML/SVG")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},"<button></button>\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onInit")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"// For Grafana v8.3.0+ the variable needs to be wrapped in ${}\nconst { testVariable } = customProperties;\nconst testVariableName = testVariable.replace(/[${}]/g, '');\nconst buttonElt = htmlNode.querySelector('button');\n\n/*\n  Update a grafana variable\n\n  More information in the grafana docs\n  https://grafana.com/docs/grafana/latest/developers/plugins/add-support-for-variables/\n*/\nfunction updateGrafanaVariable(variableName, value) {\n  getLocationSrv().update({\n    query: {\n      [`var-${variableName}`]: value,\n    },\n    partial: true, // partial: true makes the update only affect the query parameters listed in query, and leaves the other query parameters unchanged.\n    replace: true, // replace: true tells Grafana to update the current URL state, rather than creating a new history entry.\n  });\n}\n\nfunction getGrafanaVariableValue(variable) {\n  return getTemplateSrv().replace(variable);\n}\n\nfunction updateButtonText() {\n  buttonElt.textContent = `${testVariableName}'s current value is: ${getGrafanaVariableValue(testVariable)}`;\n}\n\nbuttonElt.onclick = function () {\n  updateGrafanaVariable(testVariableName, getGrafanaVariableValue(testVariable) == 'b' ? 'a' : 'b');\n};\n\n/*\n  When the variable changes panelupdate will trigger.\n  The panelupdate is used to update the button text so the text is the same as the variable.\n*/\nhtmlNode.addEventListener('panelupdate', () => {\n  updateButtonText();\n});\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Custom properties")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "testVariable": "${testVariable}"\n}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Panel options")," (import/export)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "calcsMutation": "standard",\n  "reduceOptions": {\n    "calcs": [\n      "lastNotNull",\n      "last",\n      "first",\n      "firstNotNull",\n      "min",\n      "max",\n      "mean",\n      "sum",\n      "count",\n      "range",\n      "delta",\n      "step",\n      "diff",\n      "logmin",\n      "allIsZero",\n      "allIsNull",\n      "diffperc"\n    ]\n  },\n  "add100Percentage": true,\n  "centerAlignContent": true,\n  "overflow": "visible",\n  "SVGBaseFix": true,\n  "codeData": "{\\n  \\"testVariable\\": \\"${testVariable}\\"\\n}",\n  "rootCSS": "",\n  "css": "",\n  "html": "<button></button>\\n",\n  "renderOnMount": true,\n  "onRender": "",\n  "dynamicData": false,\n  "dynamicHtmlGraphics": false,\n  "dynamicFieldDisplayValues": false,\n  "dynamicProps": false,\n  "panelupdateOnMount": true,\n  "onInitOnResize": false,\n  "onInit": "// For Grafana v8.3.0+ the variable needs to be wrapped in ${}\\nconst { testVariable } = customProperties;\\nconst testVariableName = testVariable.replace(/[${}]/g, \\"\\");\\nconst buttonElt = htmlNode.querySelector(\'button\');\\n\\n/*\\n  Update a grafana variable\\n\\n  More information in the grafana docs\\n  https://grafana.com/docs/grafana/latest/developers/plugins/add-support-for-variables/\\n*/\\nfunction updateGrafanaVariable(variableName, value) {\\n  getLocationSrv().update({\\n    query: {\\n      [`var-${variableName}`]: value,\\n    },\\n    partial: true, // partial: true makes the update only affect the query parameters listed in query, and leaves the other query parameters unchanged.\\n    replace: true, // replace: true tells Grafana to update the current URL state, rather than creating a new history entry.\\n  });\\n}\\n\\nfunction getGrafanaVariableValue(variable) {\\n  return getTemplateSrv().replace(variable);\\n}\\n\\nfunction updateButtonText() {\\n  buttonElt.textContent = `${testVariableName}\'s current value is: ${getGrafanaVariableValue(testVariable)}`;\\n}\\n\\nbuttonElt.onclick = function () {\\n  updateGrafanaVariable(testVariableName, getGrafanaVariableValue(testVariable) == \'b\' ? \'a\' : \'b\');\\n};\\n\\n/*\\n  When the variable changes panelupdate will trigger.\\n  The panelupdate is used to update the button text so the text is the same as the variable.\\n*/\\nhtmlNode.addEventListener(\'panelupdate\', () => {\\n  updateButtonText();\\n});\\n"\n}\n')))}d.isMDXComponent=!0},4302:function(e,a,t){a.Z=t.p+"assets/images/update-grafana-variable-example-79cf4dd6597ef1741652be0cba6418fa.gif"},998:function(e,a,t){a.Z=t.p+"assets/images/test-variable-used-e1dc001efd789e40b5506c155e9613c5.png"}}]);