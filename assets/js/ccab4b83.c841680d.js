"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[807],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||a;return n?o.createElement(f,s(s({ref:t},c),{},{components:n})):o.createElement(f,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var d=2;d<a;d++)s[d]=n[d];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2931:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var o=n(7462),r=(n(7294),n(3905));const a={id:"export-to-csv-influx2",title:"Export to CSV (influx2)"},s=void 0,i={unversionedId:"examples/export-to-csv/export-to-csv-influx2",id:"examples/export-to-csv/export-to-csv-influx2",title:"Export to CSV (influx2)",description:"Check out the Export to CSV index page for a more detailed explanation of the approach",source:"@site/docs/examples/export-to-csv/influx2.md",sourceDirName:"examples/export-to-csv",slug:"/examples/export-to-csv/export-to-csv-influx2",permalink:"/docs/examples/export-to-csv/export-to-csv-influx2",draft:!1,editUrl:"https://github.com/gapitio/gapit-htmlgraphics-panel/edit/main/website/docs/examples/export-to-csv/influx2.md",tags:[],version:"current",frontMatter:{id:"export-to-csv-influx2",title:"Export to CSV (influx2)"},sidebar:"docsSidebar",previous:{title:"Export to CSV (influx1.8)",permalink:"/docs/examples/export-to-csv/export-to-csv-influx1.8"},next:{title:"Font example",permalink:"/docs/examples/font-example"}},l={},d=[],c={toc:d};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Check out the ",(0,r.kt)("a",{parentName:"p",href:"/docs/examples/export-to-csv/"},"Export to CSV index page")," for a more detailed explanation of the approach")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Example: export to CSV",src:n(9394).Z,width:"992",height:"681"})),(0,r.kt)("p",null,"This works by using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/references#data-global"},"data object"),", which makes it possible to use ",(0,r.kt)("em",{parentName:"p"},"most")," data sources provided by Grafana."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},'The query can be "hidden" by pressing the "Enable/disable query" button ',(0,r.kt)("em",{parentName:"p"},"(small eye icon)"),". Which will disable the query (for better performance).")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Remember to add a query!!!")),(0,r.kt)("p",null,"Example query using the influx database:\n",(0,r.kt)("img",{alt:"Example: export to CSV query",src:n(7903).Z,width:"1084",height:"395"})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"HTML/SVG")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<button>Export to CSV</button>\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"onInit")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const btn = htmlNode.querySelector('button');\n\nconst timeoutLength = 3000;\nconst defaultButtonText = 'Export to CSV';\n\nconst toCsv = (resultsData) => {\n  const [\n    {\n      frames: [\n        {\n          schema: { fields },\n          data: { values },\n        },\n      ],\n    },\n  ] = Object.values(resultsData.results);\n\n  if (values.length <= 0) {\n    btn.textContent = 'Export failed... (Found no values).';\n    console.warn('Got no values');\n    return;\n  }\n\n  // Ensure time is first\n  const orderFieldsAndValues = (values, fields) => {\n    const timeIndex = fields.findIndex(({ type, name }) => [type, name.toLowerCase()].includes('time'));\n    const timeField = fields[timeIndex];\n    const timeValues = values[timeIndex].map((v) => new Date(v).toISOString()); // Format time as iso string\n\n    const orderedFields = [timeField, ...fields.filter((_, i) => i !== timeIndex)];\n    const orderedValues = [timeValues, ...values.filter((_, i) => i !== timeIndex)];\n    return { orderedFields, orderedValues };\n  };\n\n  const { orderedFields, orderedValues } = orderFieldsAndValues(values, fields);\n\n  const fieldNames = orderedFields.map((field) => field.name);\n  const [first, ...rest] = orderedValues; // Need first for indexing\n  const csv = [\n    fieldNames.join(','),\n    ...first.map((firstValue, i) => [firstValue, ...rest.map((v) => v[i])].join(',')),\n  ].join('\\r\\n');\n\n  return csv;\n};\n\nconst saveCsvFile = (csv, filename) => {\n  const elt = document.createElement('a');\n  elt.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv));\n  elt.setAttribute('download', filename);\n\n  elt.style.display = 'none';\n  htmlNode.appendChild(elt);\n\n  elt.click();\n\n  htmlNode.removeChild(elt);\n};\n\nbtn.onclick = () => {\n  clearTimeout(btn.timeout);\n  btn.textContent = 'Exporting...';\n  // The refId (query name) only updates after a page refresh.\n  const [{ query, refId, datasource }] = data.request.targets;\n  const { from, to } = data.timeRange;\n\n  const filename = [refId, from.toISOString(), to.toISOString()].join('-') + '.csv';\n\n  const body = {\n    queries: [\n      {\n        datasource,\n        query,\n        refId,\n        intervalMs: 0,\n        maxDataPoints: 1e9, // 1E9 = 1_000_000_000 (Max allowed 1E20)\n      },\n    ],\n    from: String(from.valueOf()),\n    to: String(to.valueOf()),\n  };\n\n  fetch('/api/ds/query', {\n    headers: {\n      'cache-control': 'no-cache',\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify(body),\n    method: 'POST',\n  })\n    .then((res) =>\n      res.json().then((data) => {\n        const csv = toCsv(data);\n        if (csv) {\n          saveCsvFile(toCsv(data), filename);\n          btn.textContent = 'Export finished';\n        }\n\n        btn.timeout = setTimeout(() => {\n          btn.textContent = defaultButtonText;\n        }, timeoutLength);\n      })\n    )\n    .catch((e) => {\n      btn.textContent = 'Export failed... (Failed retrieving data)';\n      console.warn(e);\n\n      btn.timeout = setTimeout(() => {\n        btn.textContent = defaultButtonText;\n      }, timeoutLength);\n    });\n};\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Panel options")," (import/export)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "add100Percentage": true,\n  "centerAlignContent": true,\n  "overflow": "visible",\n  "SVGBaseFix": true,\n  "codeData": "{\\n  \\"text\\": \\"Random text\\"\\n}",\n  "rootCSS": "",\n  "css": "* {\\n  font-family: Open Sans;\\n}\\n",\n  "html": "<button>Export to CSV</button>",\n  "renderOnMount": true,\n  "onRender": "",\n  "dynamicHtmlGraphics": false,\n  "dynamicData": true,\n  "dynamicFieldDisplayValues": false,\n  "dynamicProps": false,\n  "panelupdateOnMount": true,\n  "onInitOnResize": false,\n  "onInit": "const btn = htmlNode.querySelector(\'button\');\\n\\nconst timeoutLength = 3000;\\nconst defaultButtonText = \'Export to CSV\';\\n\\nconst toCsv = (resultsData) => {\\n  const [\\n    {\\n      frames: [\\n        {\\n          schema: { fields },\\n          data: { values },\\n        },\\n      ],\\n    },\\n  ] = Object.values(resultsData.results);\\n\\n  if (values.length <= 0) {\\n    btn.textContent = \'Export failed... (Found no values).\';\\n    console.warn(\'Got no values\');\\n    return;\\n  }\\n\\n  // Ensure time is first\\n  const orderFieldsAndValues = (values, fields) => {\\n    const timeIndex = fields.findIndex(({ type, name }) => [type, name.toLowerCase()].includes(\'time\'));\\n    const timeField = fields[timeIndex];\\n    const timeValues = values[timeIndex].map((v) => new Date(v).toISOString()); // Format time as iso string\\n\\n    const orderedFields = [timeField, ...fields.filter((_, i) => i !== timeIndex)];\\n    const orderedValues = [timeValues, ...values.filter((_, i) => i !== timeIndex)];\\n    return { orderedFields, orderedValues };\\n  };\\n\\n  const { orderedFields, orderedValues } = orderFieldsAndValues(values, fields);\\n\\n  const fieldNames = orderedFields.map((field) => field.name);\\n  const [first, ...rest] = orderedValues; // Need first for indexing\\n  const csv = [\\n    fieldNames.join(\',\'),\\n    ...first.map((firstValue, i) => [firstValue, ...rest.map((v) => v[i])].join(\',\')),\\n  ].join(\'\\\\r\\\\n\');\\n\\n  return csv;\\n};\\n\\nconst saveCsvFile = (csv, filename) => {\\n  const elt = document.createElement(\'a\');\\n  elt.setAttribute(\'href\', \'data:text/csv;charset=utf-8,\' + encodeURIComponent(csv));\\n  elt.setAttribute(\'download\', filename);\\n\\n  elt.style.display = \'none\';\\n  htmlNode.appendChild(elt);\\n\\n  elt.click();\\n\\n  htmlNode.removeChild(elt);\\n};\\n\\nbtn.onclick = () => {\\n  clearTimeout(btn.timeout);\\n  btn.textContent = \'Exporting...\';\\n  // The refId (query name) only updates after a page refresh.\\n  const [{ query, refId, datasource }] = data.request.targets;\\n  const { from, to } = data.timeRange;\\n\\n  const filename = [refId, from.toISOString(), to.toISOString()].join(\'-\') + \'.csv\';\\n\\n  const body = {\\n    queries: [\\n      {\\n        datasource,\\n        query,\\n        refId,\\n        intervalMs: 0,\\n        maxDataPoints: 1e9, // 1E9 = 1_000_000_000 (Max allowed 1E20)\\n      },\\n    ],\\n    from: String(from.valueOf()),\\n    to: String(to.valueOf()),\\n  };\\n\\n  fetch(\'/api/ds/query\', {\\n    headers: {\\n      \'cache-control\': \'no-cache\',\\n      \'content-type\': \'application/json\',\\n    },\\n    body: JSON.stringify(body),\\n    method: \'POST\',\\n  })\\n    .then((res) =>\\n      res.json().then((data) => {\\n        const csv = toCsv(data);\\n        if (csv) {\\n          saveCsvFile(toCsv(data), filename);\\n          btn.textContent = \'Export finished\';\\n        }\\n\\n        btn.timeout = setTimeout(() => {\\n          btn.textContent = defaultButtonText;\\n        }, timeoutLength);\\n      })\\n    )\\n    .catch((e) => {\\n      btn.textContent = \'Export failed... (Failed retrieving data)\';\\n      console.warn(e);\\n\\n      btn.timeout = setTimeout(() => {\\n        btn.textContent = defaultButtonText;\\n      }, timeoutLength);\\n    });\\n};"\n}\n')))}u.isMDXComponent=!0},9394:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/example-export-to-csv-2d992219e42fa4fc742ec2ce58fc787e.gif"},7903:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/example-export-to-csv-query-e0e937f22f4e5a2e2f381e0d018baa43.png"}}]);