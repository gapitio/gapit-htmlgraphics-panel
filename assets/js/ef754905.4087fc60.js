"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[35],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),d=l,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function h(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:l,o[1]=i;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},77:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(7462),l=(t(7294),t(3905));const r={id:"communicate-between-panels",title:"Communicate between panels"},o=void 0,i={unversionedId:"examples/communicate-between-panels",id:"examples/communicate-between-panels",title:"Communicate between panels",description:"Send data from one panel to a different one.",source:"@site/docs/examples/communicate-between-panels.md",sourceDirName:"examples",slug:"/examples/communicate-between-panels",permalink:"/docs/examples/communicate-between-panels",draft:!1,editUrl:"https://github.com/gapitio/gapit-htmlgraphics-panel/edit/main/website/docs/examples/communicate-between-panels.md",tags:[],version:"current",frontMatter:{id:"communicate-between-panels",title:"Communicate between panels"},sidebar:"docsSidebar",previous:{title:"Change svg attributes with grafana variables example",permalink:"/docs/examples/change-svg-attributes-with-grafana-variables-example"},next:{title:"Dynamic height and width",permalink:"/docs/examples/dynamic-height-and-width"}},s={},c=[{value:"Dispatcher",id:"dispatcher",level:2},{value:"Receiver",id:"receiver",level:2}],p={toc:c};function u(e){let{components:n,...r}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Send data from one panel to a different one."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Communicate between panels",src:t(2167).Z,width:"1313",height:"743"})),(0,l.kt)("p",null,"This uses ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent"},"CustomEvent")," to dispatch events to the ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Document"},"document"),". Which makes it available for all panels if they listen to the ",(0,l.kt)("inlineCode",{parentName:"p"},"htmlGraphics")," event."),(0,l.kt)("h2",{id:"dispatcher"},"Dispatcher"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"HTML/SVG")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},"<button>Dispatch event and pass the metric value <strong /></button>\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onRender")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Sets the value from the first series on every refresh\nconst htmlgraphicsValue = htmlNode.querySelector('strong');\n\nif (htmlgraphicsValue) {\n  const valueField = data.series[0]?.fields[1];\n  if (valueField) {\n    const length = valueField.values.length;\n    htmlgraphicsValue.textContent = valueField.values.get(length - 1);\n  } else {\n    htmlgraphicsValue.textContent = 'No data';\n  }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onInit")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const buttonElt = htmlNode.querySelector('button');\nconst valueElt = htmlNode.querySelector('strong');\n\nbuttonElt.onclick = () => {\n  htmlGraphicsEvent = new CustomEvent('htmlgraphics', { detail: valueElt.textContent });\n  document.dispatchEvent(htmlGraphicsEvent);\n};\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Panel options")," (import/export)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "calcsMutation": "standard",\n  "reduceOptions": {\n    "calcs": [\n      "lastNotNull",\n      "last",\n      "first",\n      "firstNotNull",\n      "min",\n      "max",\n      "mean",\n      "sum",\n      "count",\n      "range",\n      "delta",\n      "step",\n      "diff",\n      "logmin",\n      "allIsZero",\n      "allIsNull",\n      "diffperc"\n    ]\n  },\n  "add100Percentage": true,\n  "centerAlignContent": true,\n  "overflow": "visible",\n  "SVGBaseFix": true,\n  "codeData": "{\\n  \\"text\\": \\"Random text\\"\\n}",\n  "rootCSS": "",\n  "css": "* {\\n  font-family: Open Sans;\\n}\\n",\n  "html": "<button>Dispatch event and pass the metric value <strong /></button>\\n",\n  "renderOnMount": true,\n  "onRender": "// Sets the value from the first series on every refresh\\nconst htmlgraphicsValue = htmlNode.querySelector(\\"strong\\");\\n\\nif (htmlgraphicsValue) {\\n  const valueField = data.series[0]?.fields[1];\\n  if (valueField) {\\n    const length = valueField.values.length;\\n    htmlgraphicsValue.textContent = valueField.values.get(length - 1);\\n  } else {\\n    htmlgraphicsValue.textContent = \\"No data\\"\\n  }\\n}\\n",\n  "dynamicData": false,\n  "dynamicHtmlGraphics": false,\n  "dynamicFieldDisplayValues": false,\n  "dynamicProps": false,\n  "panelupdateOnMount": true,\n  "onInit": "const buttonElt = htmlNode.querySelector(\\"button\\");\\nconst valueElt = htmlNode.querySelector(\\"strong\\");\\n\\nbuttonElt.onclick = () => {\\n  htmlGraphicsEvent = new CustomEvent(\\"htmlgraphics\\", { detail: valueElt.textContent });\\n  document.dispatchEvent(htmlGraphicsEvent);\\n};\\n"\n}\n')),(0,l.kt)("h2",{id:"receiver"},"Receiver"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"HTML/SVG")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<div style="text-align: center;">Recieved value <strong /></div>\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onInit")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const valueElt = htmlNode.querySelector('strong');\n\nconst doSomething = (e) => {\n  const value = e.detail;\n  valueElt.textContent = value;\n};\n\ndocument.addEventListener('htmlgraphics', doSomething);\n\nhtmlNode.onpanelwillunmount = () => {\n  document.removeEventListener('htmlgraphics', doSomething);\n};\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Panel options")," (import/export)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "calcsMutation": "standard",\n  "reduceOptions": {\n    "calcs": [\n      "lastNotNull",\n      "last",\n      "first",\n      "firstNotNull",\n      "min",\n      "max",\n      "mean",\n      "sum",\n      "count",\n      "range",\n      "delta",\n      "step",\n      "diff",\n      "logmin",\n      "allIsZero",\n      "allIsNull",\n      "diffperc"\n    ]\n  },\n  "add100Percentage": true,\n  "centerAlignContent": true,\n  "overflow": "visible",\n  "SVGBaseFix": true,\n  "codeData": "{\\n  \\"text\\": \\"Random text\\"\\n}",\n  "rootCSS": "",\n  "css": "* {\\n  font-family: Open Sans;\\n}\\n",\n  "html": "<div style=\\"text-align: center;\\">Recieved value <strong /></div>",\n  "renderOnMount": true,\n  "onRender": "",\n  "dynamicData": false,\n  "dynamicHtmlGraphics": false,\n  "dynamicFieldDisplayValues": false,\n  "dynamicProps": false,\n  "panelupdateOnMount": true,\n  "onInit": "const valueElt = htmlNode.querySelector(\\"strong\\");\\n\\n\\nconst doSomething = (e) => {\\n  const value = e.detail;\\n  valueElt.textContent = value;\\n};\\n\\ndocument.addEventListener(\\"htmlgraphics\\", doSomething);\\n\\nhtmlNode.onpanelwillunmount = () => {\\n  document.removeEventListener(\\"htmlgraphics\\", doSomething);\\n};\\n"\n}\n')))}u.isMDXComponent=!0},2167:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/example-communicate-between-panels-a554ba2fb2c75dc72d5d29292b475848.gif"}}]);