"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[736],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return u}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(a),u=l,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||r;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function u(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5189:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return m}});var n=a(7462),l=a(3366),r=(a(7294),a(3905)),o=["components"],i={id:"references",title:"References"},p=void 0,s={unversionedId:"references",id:"references",isDocsHomePage:!1,title:"References",description:"The plugin makes several interfaces to the HTML/SVG document and Grafana in the execution context of onRender and onInit functions/javascripts. Below are details for each. Remember, you can always use the developer console (ctrl+shift+j) and console.log().",source:"@site/docs/references.md",sourceDirName:".",slug:"/references",permalink:"/docs/references",editUrl:"https://github.com/gapitio/gapit-htmlgraphics-panel/edit/main/website/docs/references.md",tags:[],version:"current",frontMatter:{id:"references",title:"References"},sidebar:"sidebar",previous:{title:"Options",permalink:"/docs/options"},next:{title:"How to add the HTMLGraphics panel",permalink:"/docs/guides/how-to-add-the-panel"}},c=[{value:"htmlGraphics (global)",id:"htmlgraphics-global",children:[{value:"htmlNode",id:"htmlnode",children:[]},{value:"data",id:"data",children:[]},{value:"customProperties",id:"customproperties",children:[]},{value:"codeData",id:"codedata",children:[]},{value:"options",id:"options",children:[]},{value:"theme",id:"theme",children:[]},{value:"getTemplateSrv",id:"gettemplatesrv",children:[]},{value:"getLocationSrv",id:"getlocationsrv",children:[]},{value:"props",id:"props",children:[]},{value:"width",id:"width",children:[]},{value:"height",id:"height",children:[]}]},{value:"htmlNode (global)",id:"htmlnode-global",children:[{value:"panelupdate event",id:"panelupdate-event",children:[]},{value:"panelwillunmount event",id:"panelwillunmount-event",children:[]}]},{value:"customProperties (global)",id:"customproperties-global",children:[]},{value:"codeData (global)",id:"codedata-global",children:[]},{value:"data (global)",id:"data-global",children:[]},{value:"options (global)",id:"options-global",children:[]},{value:"theme (global)",id:"theme-global",children:[]},{value:"getTemplateSrv (global)",id:"gettemplatesrv-global",children:[]},{value:"getLocationSrv (global)",id:"getlocationsrv-global",children:[]}],d={toc:c};function m(e){var t=e.components,a=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The plugin makes several interfaces to the HTML/SVG document and Grafana in the execution context of onRender and onInit functions/javascripts. Below are details for each. Remember, you can always use the ",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/web/tools/chrome-devtools/console"},"developer console")," (ctrl+shift+j) and ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Console/log"},"console.log()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Log this in onRender or onInit, and look at developer console (ctrl+shift+j).\nconsole.log('htmlGraphics', htmlGraphics);\n")),(0,r.kt)("h2",{id:"htmlgraphics-global"},"htmlGraphics (global)"),(0,r.kt)("p",null,"An object (dict) containing all the variables."),(0,r.kt)("h3",{id:"htmlnode"},"htmlNode"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"#htmlnode-global"},"htmlNode")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.htmlNode);\n")),(0,r.kt)("h3",{id:"data"},"data"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"#data-global"},"data")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.data);\n")),(0,r.kt)("h3",{id:"customproperties"},"customProperties"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"#customproperties-global"},"customProperties")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.customProperties);\n")),(0,r.kt)("h3",{id:"codedata"},"codeData"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"#codedata-global"},"codeData")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.codeData);\n")),(0,r.kt)("h3",{id:"options"},"options"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"#options-global"},"options")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.options);\n")),(0,r.kt)("h3",{id:"theme"},"theme"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"#theme-global"},"theme")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.theme);\n")),(0,r.kt)("h3",{id:"gettemplatesrv"},"getTemplateSrv"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"#gettemplatesrv-global"},"getTemplateSrv")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.getTemplateSrv());\n")),(0,r.kt)("h3",{id:"getlocationsrv"},"getLocationSrv"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"#getlocationsrv-global"},"getLocationSrv")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.getLocationSrv());\n")),(0,r.kt)("h3",{id:"props"},"props"),(0,r.kt)("p",null,"Containing all the props from the panel ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/packages_api/data/panelprops/"},"panelprops")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.props);\n")),(0,r.kt)("h3",{id:"width"},"width"),(0,r.kt)("p",null,"The width of the panel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.width);\n")),(0,r.kt)("h3",{id:"height"},"height"),(0,r.kt)("p",null,"The height of the panel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(htmlGraphics.height);\n")),(0,r.kt)("h2",{id:"htmlnode-global"},"htmlNode (global)"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot"},"shadow root")," which contains the elements added in the HTML/SVG document (works similarly to document)."),(0,r.kt)("p",null,"Used to get elements and their properties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const randomTextElt = htmlNode.querySelector('#random-text-elt');\nrandomTextElt.textContent = 'Something';\nrandomTextElt.style.fill = '#08f';\n")),(0,r.kt)("h3",{id:"panelupdate-event"},"panelupdate event"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"panelupdate")," will trigger when new data is available (like onRender)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function onPanelUpdate() {\n  console.log(data);\n}\n\nhtmlNode.addEventListener('panelupdate', onPanelUpdate); // Triggers when new data is available (like onRender)\nhtmlNode.onpanelupdate = onPanelUpdate; // A function that triggers at the same time as the panelupdate event\n")),(0,r.kt)("p",null,"Because of the panelupdate event, frameworks like ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/"},"React"),", ",(0,r.kt)("a",{parentName:"p",href:"https://svelte.dev/"},"Svelte"),", ETC are easier to work with. Check out the ",(0,r.kt)("a",{parentName:"p",href:"/docs/projects#bundlers"},"Bundlers")," for more information."),(0,r.kt)("h3",{id:"panelwillunmount-event"},"panelwillunmount event"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"panelwillunmount")," will trigger when the panel will unmount ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-component.html#componentwillunmount"},"https://reactjs.org/docs/react-component.html#componentwillunmount"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function onPanelWillUnmount() {\n  console.log('Bye');\n}\n\nhtmlNode.addEventListener('panelwillunmount', onPanelWillUnmount);\nhtmlNode.onpanelwillunmount = onPanelWillUnmount;\n")),(0,r.kt)("h2",{id:"customproperties-global"},"customProperties (global)"),(0,r.kt)("p",null,"The parsed json object ",(0,r.kt)("em",{parentName:"p"},"(also available as a JSON string in options.codeData)")," from the Custom properties option ",(0,r.kt)("em",{parentName:"p"},"(named codeData in the options for backwards compatibility)"),"."),(0,r.kt)("p",null,"Used to get the json object values."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Custom properties")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "something": true\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// onRender or onInit\n\nconsole.log(customProperties.something); // true\n")),(0,r.kt)("h2",{id:"codedata-global"},"codeData (global)"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"codeData is here for backwards compatibility. Please use customProperties instead."))),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"#customProperties-global"},"customProperties")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Custom properties")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "something": true\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// onRender or onInit\n\nconsole.log(codeData.something); // true\n")),(0,r.kt)("h2",{id:"data-global"},"data (global)"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/packages_api/data/paneldata/"},"PanelData interface")," passed in to the panel by Grafana. It is used to get the values from the DataFrame."),(0,r.kt)("p",null,"Can be used to retrieve metric values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Used in onRender as it updates every time new data is available\nconst getMetricByName = (metricName, noDataValue = 'No data') => {\n  const filteredSeries = data.series.filter((series) => series.name == metricName);\n  if (filteredSeries.length > 0) {\n    return filteredSeries[0].fields[1].state.calcs.last;\n  }\n  return noDataValue;\n};\n\ngetMetricByName('random-metric-name');\n")),(0,r.kt)("h2",{id:"options-global"},"options (global)"),(0,r.kt)("p",null,"The options object that can be edited in the edit menu. All the options are stored in the object (onRender, htmlNode, ETC)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(options);\n\n// Looks something like this, when logged in the console.\n\n{\n  SVGBaseFix: true,\n  add100Percentage: true,\n  centerAlignContent: true,\n  codeData: "{\\"randomKey\\": \\"randomValue\\"}",\n  css: undefined,\n  html: undefined,\n  onInit: "console.log(options)",\n  onRender: undefined\n}\n')),(0,r.kt)("h2",{id:"theme-global"},"theme (global)"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/packages_api/data/grafanatheme/"},"GrafanaTheme")," interface. It stores the current theme (light/dark), colors used by grafana, ETC."),(0,r.kt)("p",null,"Very useful when you're making a dark mode and light mode."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const darkTheme = () => {\n  ...\n};\n\nif (theme.isDark) {\n  darkTheme();\n}\n")),(0,r.kt)("h2",{id:"gettemplatesrv-global"},"getTemplateSrv (global)"),(0,r.kt)("p",null,"Used to retrieve the ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/packages_api/runtime/templatesrv/"},"TemplateSrv")," that can be used to fetch available template variables."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"getTemplateSrv().replace(`$randomVariable`);\n")),(0,r.kt)("h2",{id:"getlocationsrv-global"},"getLocationSrv (global)"),(0,r.kt)("p",null,"Used to retrieve the ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/packages_api/runtime/locationsrv/"},"LocationSrv")," that can be used to update the template variables."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://grafana.com/docs/grafana/latest/developers/plugins/add-support-for-variables/"},"Grafana templates and variables")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/gapitio/gapit-htmlgraphics-panel/tree/master/examples/update-grafana-variable-example"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"getLocationSrv().update({\n  query: {\n    'var-randomVariable': 'randomValue',\n  },\n  partial: true,\n  replace: false,\n});\n")))}m.isMDXComponent=!0}}]);