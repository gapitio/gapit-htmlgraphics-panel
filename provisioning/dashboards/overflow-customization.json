{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 3,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: Open Sans;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<div>\n  <div>Item 1</div>\n  <div>Item 2</div>\n  <div>Item 3</div>\n  <div>Item 4</div>\n  <div>Item 5</div>\n  <div>Item 6</div>\n  <div>Item 7</div>\n  <div>Item 8</div>\n  <div>Item 9</div>\n  <div>Item 10</div>\n  <div>Item 11</div>\n  <div>Item 12</div>\n  <div>Item 13</div>\n  <div>Item 14</div>\n  <div>Item 15</div>\n  <div>Item 16</div>\n  <div>Item 17</div>\n  <div>Item 18</div>\n  <div>Item 19</div>\n  <div>Item 20</div>\n  <div>Item 21</div>\n  <div>Item 22</div>\n  <div>Item 23</div>\n  <div>Item 24</div>\n  <div>Item 25</div>\n  <div>Item 26</div>\n  <div>Item 27</div>\n  <div>Item 28</div>\n  <div>Item 29</div>\n  <div>Item 30</div>\n  <div>Item 31</div>\n  <div>Item 32</div>\n  <div>Item 33</div>\n  <div>Item 34</div>\n  <div>Item 35</div>\n  <div>Item 36</div>\n  <div>Item 37</div>\n  <div>Item 38</div>\n  <div>Item 39</div>\n  <div>Item 40</div>\n  <div>Item 41</div>\n  <div>Item 42</div>\n  <div>Item 43</div>\n  <div>Item 44</div>\n  <div>Item 45</div>\n  <div>Item 46</div>\n  <div>Item 47</div>\n  <div>Item 48</div>\n  <div>Item 49</div>\n  <div>Item 50</div>\n  <div>Item 51</div>\n  <div>Item 52</div>\n  <div>Item 53</div>\n  <div>Item 54</div>\n  <div>Item 55</div>\n  <div>Item 56</div>\n  <div>Item 57</div>\n  <div>Item 58</div>\n  <div>Item 59</div>\n  <div>Item 60</div>\n  <div>Item 61</div>\n  <div>Item 62</div>\n  <div>Item 63</div>\n  <div>Item 64</div>\n  <div>Item 65</div>\n  <div>Item 66</div>\n  <div>Item 67</div>\n  <div>Item 68</div>\n  <div>Item 69</div>\n  <div>Item 70</div>\n  <div>Item 71</div>\n  <div>Item 72</div>\n  <div>Item 73</div>\n  <div>Item 74</div>\n  <div>Item 75</div>\n  <div>Item 76</div>\n  <div>Item 77</div>\n  <div>Item 78</div>\n  <div>Item 79</div>\n  <div>Item 80</div>\n  <div>Item 81</div>\n  <div>Item 82</div>\n  <div>Item 83</div>\n  <div>Item 84</div>\n  <div>Item 85</div>\n  <div>Item 86</div>\n  <div>Item 87</div>\n  <div>Item 88</div>\n  <div>Item 89</div>\n  <div>Item 90</div>\n  <div>Item 91</div>\n  <div>Item 92</div>\n  <div>Item 93</div>\n  <div>Item 94</div>\n  <div>Item 95</div>\n  <div>Item 96</div>\n  <div>Item 97</div>\n  <div>Item 98</div>\n  <div>Item 99</div>\n  <div>Item 100</div>\n</div>",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "// Sets the value from the first series on every refresh\nconst htmlgraphicsValue = htmlNode.getElementById('htmlgraphics-value');\n\nif (htmlgraphicsValue) {\n  const valueField = data.series[0]?.fields[1];\n  if (valueField) {\n    const length = valueField.values.length;\n    htmlgraphicsValue.textContent = valueField.values.get(length - 1);\n  } else {\n    htmlgraphicsValue.textContent = \"No data\"\n  }\n}\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "median",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "title": "Overflow = Visible (with grafana scrollbar)",
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 5,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: Open Sans;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<div>\n  <div>Item 1</div>\n  <div>Item 2</div>\n  <div>Item 3</div>\n  <div>Item 4</div>\n  <div>Item 5</div>\n  <div>Item 6</div>\n  <div>Item 7</div>\n  <div>Item 8</div>\n  <div>Item 9</div>\n  <div>Item 10</div>\n  <div>Item 11</div>\n  <div>Item 12</div>\n  <div>Item 13</div>\n  <div>Item 14</div>\n  <div>Item 15</div>\n  <div>Item 16</div>\n  <div>Item 17</div>\n  <div>Item 18</div>\n  <div>Item 19</div>\n  <div>Item 20</div>\n  <div>Item 21</div>\n  <div>Item 22</div>\n  <div>Item 23</div>\n  <div>Item 24</div>\n  <div>Item 25</div>\n  <div>Item 26</div>\n  <div>Item 27</div>\n  <div>Item 28</div>\n  <div>Item 29</div>\n  <div>Item 30</div>\n  <div>Item 31</div>\n  <div>Item 32</div>\n  <div>Item 33</div>\n  <div>Item 34</div>\n  <div>Item 35</div>\n  <div>Item 36</div>\n  <div>Item 37</div>\n  <div>Item 38</div>\n  <div>Item 39</div>\n  <div>Item 40</div>\n  <div>Item 41</div>\n  <div>Item 42</div>\n  <div>Item 43</div>\n  <div>Item 44</div>\n  <div>Item 45</div>\n  <div>Item 46</div>\n  <div>Item 47</div>\n  <div>Item 48</div>\n  <div>Item 49</div>\n  <div>Item 50</div>\n  <div>Item 51</div>\n  <div>Item 52</div>\n  <div>Item 53</div>\n  <div>Item 54</div>\n  <div>Item 55</div>\n  <div>Item 56</div>\n  <div>Item 57</div>\n  <div>Item 58</div>\n  <div>Item 59</div>\n  <div>Item 60</div>\n  <div>Item 61</div>\n  <div>Item 62</div>\n  <div>Item 63</div>\n  <div>Item 64</div>\n  <div>Item 65</div>\n  <div>Item 66</div>\n  <div>Item 67</div>\n  <div>Item 68</div>\n  <div>Item 69</div>\n  <div>Item 70</div>\n  <div>Item 71</div>\n  <div>Item 72</div>\n  <div>Item 73</div>\n  <div>Item 74</div>\n  <div>Item 75</div>\n  <div>Item 76</div>\n  <div>Item 77</div>\n  <div>Item 78</div>\n  <div>Item 79</div>\n  <div>Item 80</div>\n  <div>Item 81</div>\n  <div>Item 82</div>\n  <div>Item 83</div>\n  <div>Item 84</div>\n  <div>Item 85</div>\n  <div>Item 86</div>\n  <div>Item 87</div>\n  <div>Item 88</div>\n  <div>Item 89</div>\n  <div>Item 90</div>\n  <div>Item 91</div>\n  <div>Item 92</div>\n  <div>Item 93</div>\n  <div>Item 94</div>\n  <div>Item 95</div>\n  <div>Item 96</div>\n  <div>Item 97</div>\n  <div>Item 98</div>\n  <div>Item 99</div>\n  <div>Item 100</div>\n</div>",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "// Sets the value from the first series on every refresh\nconst htmlgraphicsValue = htmlNode.getElementById('htmlgraphics-value');\n\nif (htmlgraphicsValue) {\n  const valueField = data.series[0]?.fields[1];\n  if (valueField) {\n    const length = valueField.values.length;\n    htmlgraphicsValue.textContent = valueField.values.get(length - 1);\n  } else {\n    htmlgraphicsValue.textContent = \"No data\"\n  }\n}\n",
        "overflow": "hidden",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "median",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "title": "Overflow = Hidden",
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 2,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: Open Sans;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<div>\n  <div>Item 1</div>\n  <div>Item 2</div>\n  <div>Item 3</div>\n  <div>Item 4</div>\n  <div>Item 5</div>\n  <div>Item 6</div>\n  <div>Item 7</div>\n  <div>Item 8</div>\n  <div>Item 9</div>\n  <div>Item 10</div>\n  <div>Item 11</div>\n  <div>Item 12</div>\n  <div>Item 13</div>\n  <div>Item 14</div>\n  <div>Item 15</div>\n  <div>Item 16</div>\n  <div>Item 17</div>\n  <div>Item 18</div>\n  <div>Item 19</div>\n  <div>Item 20</div>\n  <div>Item 21</div>\n  <div>Item 22</div>\n  <div>Item 23</div>\n  <div>Item 24</div>\n  <div>Item 25</div>\n  <div>Item 26</div>\n  <div>Item 27</div>\n  <div>Item 28</div>\n  <div>Item 29</div>\n  <div>Item 30</div>\n  <div>Item 31</div>\n  <div>Item 32</div>\n  <div>Item 33</div>\n  <div>Item 34</div>\n  <div>Item 35</div>\n  <div>Item 36</div>\n  <div>Item 37</div>\n  <div>Item 38</div>\n  <div>Item 39</div>\n  <div>Item 40</div>\n  <div>Item 41</div>\n  <div>Item 42</div>\n  <div>Item 43</div>\n  <div>Item 44</div>\n  <div>Item 45</div>\n  <div>Item 46</div>\n  <div>Item 47</div>\n  <div>Item 48</div>\n  <div>Item 49</div>\n  <div>Item 50</div>\n  <div>Item 51</div>\n  <div>Item 52</div>\n  <div>Item 53</div>\n  <div>Item 54</div>\n  <div>Item 55</div>\n  <div>Item 56</div>\n  <div>Item 57</div>\n  <div>Item 58</div>\n  <div>Item 59</div>\n  <div>Item 60</div>\n  <div>Item 61</div>\n  <div>Item 62</div>\n  <div>Item 63</div>\n  <div>Item 64</div>\n  <div>Item 65</div>\n  <div>Item 66</div>\n  <div>Item 67</div>\n  <div>Item 68</div>\n  <div>Item 69</div>\n  <div>Item 70</div>\n  <div>Item 71</div>\n  <div>Item 72</div>\n  <div>Item 73</div>\n  <div>Item 74</div>\n  <div>Item 75</div>\n  <div>Item 76</div>\n  <div>Item 77</div>\n  <div>Item 78</div>\n  <div>Item 79</div>\n  <div>Item 80</div>\n  <div>Item 81</div>\n  <div>Item 82</div>\n  <div>Item 83</div>\n  <div>Item 84</div>\n  <div>Item 85</div>\n  <div>Item 86</div>\n  <div>Item 87</div>\n  <div>Item 88</div>\n  <div>Item 89</div>\n  <div>Item 90</div>\n  <div>Item 91</div>\n  <div>Item 92</div>\n  <div>Item 93</div>\n  <div>Item 94</div>\n  <div>Item 95</div>\n  <div>Item 96</div>\n  <div>Item 97</div>\n  <div>Item 98</div>\n  <div>Item 99</div>\n  <div>Item 100</div>\n</div>",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "// Sets the value from the first series on every refresh\nconst htmlgraphicsValue = htmlNode.getElementById('htmlgraphics-value');\n\nif (htmlgraphicsValue) {\n  const valueField = data.series[0]?.fields[1];\n  if (valueField) {\n    const length = valueField.values.length;\n    htmlgraphicsValue.textContent = valueField.values.get(length - 1);\n  } else {\n    htmlgraphicsValue.textContent = \"No data\"\n  }\n}\n",
        "overflow": "auto",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "median",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "title": "Overflow = Auto",
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 8
      },
      "id": 4,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: Open Sans;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<div>\n  <div>Item 1</div>\n  <div>Item 2</div>\n  <div>Item 3</div>\n  <div>Item 4</div>\n  <div>Item 5</div>\n  <div>Item 6</div>\n  <div>Item 7</div>\n  <div>Item 8</div>\n  <div>Item 9</div>\n  <div>Item 10</div>\n  <div>Item 11</div>\n  <div>Item 12</div>\n  <div>Item 13</div>\n  <div>Item 14</div>\n  <div>Item 15</div>\n  <div>Item 16</div>\n  <div>Item 17</div>\n  <div>Item 18</div>\n  <div>Item 19</div>\n  <div>Item 20</div>\n  <div>Item 21</div>\n  <div>Item 22</div>\n  <div>Item 23</div>\n  <div>Item 24</div>\n  <div>Item 25</div>\n  <div>Item 26</div>\n  <div>Item 27</div>\n  <div>Item 28</div>\n  <div>Item 29</div>\n  <div>Item 30</div>\n  <div>Item 31</div>\n  <div>Item 32</div>\n  <div>Item 33</div>\n  <div>Item 34</div>\n  <div>Item 35</div>\n  <div>Item 36</div>\n  <div>Item 37</div>\n  <div>Item 38</div>\n  <div>Item 39</div>\n  <div>Item 40</div>\n  <div>Item 41</div>\n  <div>Item 42</div>\n  <div>Item 43</div>\n  <div>Item 44</div>\n  <div>Item 45</div>\n  <div>Item 46</div>\n  <div>Item 47</div>\n  <div>Item 48</div>\n  <div>Item 49</div>\n  <div>Item 50</div>\n  <div>Item 51</div>\n  <div>Item 52</div>\n  <div>Item 53</div>\n  <div>Item 54</div>\n  <div>Item 55</div>\n  <div>Item 56</div>\n  <div>Item 57</div>\n  <div>Item 58</div>\n  <div>Item 59</div>\n  <div>Item 60</div>\n  <div>Item 61</div>\n  <div>Item 62</div>\n  <div>Item 63</div>\n  <div>Item 64</div>\n  <div>Item 65</div>\n  <div>Item 66</div>\n  <div>Item 67</div>\n  <div>Item 68</div>\n  <div>Item 69</div>\n  <div>Item 70</div>\n  <div>Item 71</div>\n  <div>Item 72</div>\n  <div>Item 73</div>\n  <div>Item 74</div>\n  <div>Item 75</div>\n  <div>Item 76</div>\n  <div>Item 77</div>\n  <div>Item 78</div>\n  <div>Item 79</div>\n  <div>Item 80</div>\n  <div>Item 81</div>\n  <div>Item 82</div>\n  <div>Item 83</div>\n  <div>Item 84</div>\n  <div>Item 85</div>\n  <div>Item 86</div>\n  <div>Item 87</div>\n  <div>Item 88</div>\n  <div>Item 89</div>\n  <div>Item 90</div>\n  <div>Item 91</div>\n  <div>Item 92</div>\n  <div>Item 93</div>\n  <div>Item 94</div>\n  <div>Item 95</div>\n  <div>Item 96</div>\n  <div>Item 97</div>\n  <div>Item 98</div>\n  <div>Item 99</div>\n  <div>Item 100</div>\n</div>",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "// Sets the value from the first series on every refresh\nconst htmlgraphicsValue = htmlNode.getElementById('htmlgraphics-value');\n\nif (htmlgraphicsValue) {\n  const valueField = data.series[0]?.fields[1];\n  if (valueField) {\n    const length = valueField.values.length;\n    htmlgraphicsValue.textContent = valueField.values.get(length - 1);\n  } else {\n    htmlgraphicsValue.textContent = \"No data\"\n  }\n}\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "median",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": false
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "title": "Overflow = Visible",
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 16
      },
      "id": 3,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: Open Sans;\n}\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "<div>\n  <div>Item 1</div>\n  <div>Item 2</div>\n  <div>Item 3</div>\n  <div>Item 4</div>\n  <div>Item 5</div>\n  <div>Item 6</div>\n  <div>Item 7</div>\n  <div>Item 8</div>\n  <div>Item 9</div>\n  <div>Item 10</div>\n  <div>Item 11</div>\n  <div>Item 12</div>\n  <div>Item 13</div>\n  <div>Item 14</div>\n  <div>Item 15</div>\n  <div>Item 16</div>\n  <div>Item 17</div>\n  <div>Item 18</div>\n  <div>Item 19</div>\n  <div>Item 20</div>\n  <div>Item 21</div>\n  <div>Item 22</div>\n  <div>Item 23</div>\n  <div>Item 24</div>\n  <div>Item 25</div>\n  <div>Item 26</div>\n  <div>Item 27</div>\n  <div>Item 28</div>\n  <div>Item 29</div>\n  <div>Item 30</div>\n  <div>Item 31</div>\n  <div>Item 32</div>\n  <div>Item 33</div>\n  <div>Item 34</div>\n  <div>Item 35</div>\n  <div>Item 36</div>\n  <div>Item 37</div>\n  <div>Item 38</div>\n  <div>Item 39</div>\n  <div>Item 40</div>\n  <div>Item 41</div>\n  <div>Item 42</div>\n  <div>Item 43</div>\n  <div>Item 44</div>\n  <div>Item 45</div>\n  <div>Item 46</div>\n  <div>Item 47</div>\n  <div>Item 48</div>\n  <div>Item 49</div>\n  <div>Item 50</div>\n  <div>Item 51</div>\n  <div>Item 52</div>\n  <div>Item 53</div>\n  <div>Item 54</div>\n  <div>Item 55</div>\n  <div>Item 56</div>\n  <div>Item 57</div>\n  <div>Item 58</div>\n  <div>Item 59</div>\n  <div>Item 60</div>\n  <div>Item 61</div>\n  <div>Item 62</div>\n  <div>Item 63</div>\n  <div>Item 64</div>\n  <div>Item 65</div>\n  <div>Item 66</div>\n  <div>Item 67</div>\n  <div>Item 68</div>\n  <div>Item 69</div>\n  <div>Item 70</div>\n  <div>Item 71</div>\n  <div>Item 72</div>\n  <div>Item 73</div>\n  <div>Item 74</div>\n  <div>Item 75</div>\n  <div>Item 76</div>\n  <div>Item 77</div>\n  <div>Item 78</div>\n  <div>Item 79</div>\n  <div>Item 80</div>\n  <div>Item 81</div>\n  <div>Item 82</div>\n  <div>Item 83</div>\n  <div>Item 84</div>\n  <div>Item 85</div>\n  <div>Item 86</div>\n  <div>Item 87</div>\n  <div>Item 88</div>\n  <div>Item 89</div>\n  <div>Item 90</div>\n  <div>Item 91</div>\n  <div>Item 92</div>\n  <div>Item 93</div>\n  <div>Item 94</div>\n  <div>Item 95</div>\n  <div>Item 96</div>\n  <div>Item 97</div>\n  <div>Item 98</div>\n  <div>Item 99</div>\n  <div>Item 100</div>\n</div>",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "// Sets the value from the first series on every refresh\nconst htmlgraphicsValue = htmlNode.getElementById('htmlgraphics-value');\n\nif (htmlgraphicsValue) {\n  const valueField = data.series[0]?.fields[1];\n  if (valueField) {\n    const length = valueField.values.length;\n    htmlgraphicsValue.textContent = valueField.values.get(length - 1);\n  } else {\n    htmlgraphicsValue.textContent = \"No data\"\n  }\n}\n",
        "overflow": "scroll",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "median",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "title": "Overflow = Scroll",
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "grafana-testdata-datasource",
        "uid": "trlxrdZVk"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 16
      },
      "id": 6,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.3.2",
      "targets": [
        {
          "refId": "A"
        }
      ],
      "title": "Just another panel to show that overflowed items goes behind other panels",
      "type": "timeseries"
    }
  ],
  "preload": false,
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-5m",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Overflow customization",
  "uid": "benqszzr66hhcc",
  "version": 2,
  "weekStart": ""
}
